#!/usr/local/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2014, Joyent, Inc.
#

#
# A prepare-image script for `imgadm create -s prepare-image-script ...`
# for a *BSD guest of a SmartOS hypervisor. See the "PREPARE IMAGE SCRIPTS"
# section of `man imgadm`.
#
# Intended supported distros: FreeBSD.
#

set -o errexit
set -o pipefail

# Trace logging to /tmp/prepare-image-trace.log to be partially passed back
# as prepare-image:error. Note that I would have used 'prepare-image:trace'
# but deployed `imgadm` is already looking for the former.
TRACELOG=/tmp/prepare-image-trace.log
touch $TRACELOG
exec 4<> $TRACELOG
export PS4='[\D{%FT%TZ}] :${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
export BASH_XTRACEFD=4
set -o xtrace

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games


#---- error handling

trap 'errexit $?' EXIT

function fatal
{
    echo "bsd-prepare-image: fatal error: $*"
    exit 1
}

function errexit
{
    set +o xtrace
    set +o errexit
    set +o pipefail
    if [[ $1 -eq 0 ]]; then
        exit 0
    fi
    echo "error exit status $1"
    cat $TRACELOG | tail -n50 | /usr/sbin/mdata-put prepare-image:error
    /usr/sbin/mdata-put prepare-image:state error
    fatal "error exit status $1"
}


#---- support routines

function cleanup_logs() {
    find /var/log -type f | xargs rm -f
}

function cleanup_tmp() {
    rm -rf /var/tmp/*
    rm -rf /tmp/*
}

function cleanup_root() {
    # Cleaning up root account
    rm -f /root/.history
    history -c

    # Removing password for root
    pw mod user root -w none
}

function cleanup_ssh() {
    find /etc/ssh -type f -name "ssh_host_*" | xargs rm -f
    FILELIST='authorized_keys known_hosts id_dsa id_dsa.pub id_rsa id_rsa.pub ssh_config'
    for FILE in $FILELIST; do
        if [ -f "/root/.ssh/$FILE" ]; then
            rm -r /root/.ssh/$FILE
        fi
    done
}

function cleanup_disks() {
    echo "removing /dev/vtbd1 entries from fstab"
    sed -i' ' '/^\/dev\/vtbd1/d' /etc/fstab
}

function cleanup_hostname() {
    # Removes the hostname entry from /etc/rc.conf
    # This gets re-added by /lib/smartdc/set-hostname
    sed -i' ' '/^hostname=/d' /etc/rc.conf
}


function prepare_freebsd() {
    # Cleaning up network devices. Network interfaces are added at boot via
    # /lib/smartdc/add-network-interface
    sed -i' ' '/^ifconfig_vtnet/d' /etc/rc.conf

    # Remove DHCP leases
    find /var/db -type f -name "dhclient.leases.*" | xargs rm -f
    
    # Clean up entropy files generated by cron
    find /var/db/entropy -type f -name "saved-entropy.*" | xargs rm -f
    
    # Remove hostid file
    rm -rf /etc/hostid
    
    # Clean up local cache of all packages
    pkg clean -a -y
}

# Makes sure that /lib/smartdc et al are sane.
function prepare_lib_smartdc() {
    local DISTRO=$1

    # Per IMAGE-446 we need to remove the firstboot guard file for a new image.
    rm -f /lib/smartdc/.firstboot-complete-do-not-delete
}


#---- mainline

/usr/sbin/mdata-put prepare-image:state running

# Checks for OS version. We could have other BSD based
# systems beside FreeBSD in the future.

TARGET_OS=$(uname -s)

if [[ "$TARGET_OS" == "FreeBSD" ]]; then
    prepare_freebsd
else
    echo "OS $TARGET_OS is not supported."
    exit 1
fi


prepare_lib_smartdc
cleanup_logs
cleanup_tmp
cleanup_disks
cleanup_ssh
cleanup_hostname
cleanup_root

history -c

/usr/sbin/mdata-put prepare-image:state success
# Successful, but we still emit tail of trace log for info.
cat $TRACELOG | tail -n50 | /usr/sbin/mdata-put prepare-image:error || true
sleep 3
shutdown -p now
