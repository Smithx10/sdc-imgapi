#!/bin/bash
# Copyright (c) 2013 Joyent Inc. All rights reserved.
#
# A prepare-image script for `imgadm create -s prepare-image-script ...`
# for a Linux guest of a SmartOS hypervisor. See the "PREPARE IMAGE SCRIPTS"
# section of `man imgadm` and Joyent's OS-2550 for details.
#
# Intended supported distros: CentOS (not yet tested), Debian (not yet tested),
# and Ubuntu.
#

set -o errexit
set -o pipefail

# Trace logging to /tmp/prepare-image-trace.log to be partially passed back
# as prepare-image:error. Note that I would have used 'prepare-image:trace'
# but deployed `imgadm` is already looking for the former.
TRACELOG=/tmp/prepare-image-trace.log
touch $TRACELOG
exec 4<> $TRACELOG
export PS4='[\D{%FT%TZ}] :${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
export BASH_XTRACEFD=4
set -o xtrace

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games


#---- error handling

trap 'errexit $?' EXIT

function fatal
{
    echo "linux-prepare-image: fatal error: $*"
    exit 1
}

function errexit
{
    set +o xtrace
    set +o errexit
    set +o pipefail
    if [[ $1 -eq 0 ]]; then
        exit 0
    fi
    echo "error exit status $1"
    /lib/smartdc/mdata-put prepare-image:state error
    cat $TRACELOG | tail -n50 | /lib/smartdc/mdata-put prepare-image:error
    sleep 5  # TODO: need time to get mdata-put complete?
    fatal "error exit status $1"
}


#---- support routines

function cleanup_logs() {
    find /var/log -type f | xargs rm -f
    # Create wtmp - this solves an issue where syslog would not start.
    touch /var/log/wtmp
    chmod 664 /var/log/wtmp
}


function cleanup_root() {
    # Cleaning up root account
    rm -f /root/.bash_history
    history -c
    history -w || true
    rm -f /root/.bash_history
    history -c
    history -w || true
    rm -f /root/.bash_history
    rm -f /root/.lesshst
    rm -f /root/.viminfo

    # Removing password for root
    passwd -d root
}

function cleanup_ssh() {
    find /etc/ssh -type f -name "ssh_host_*" | xargs rm -f
    FILELIST='authorized_keys known_hosts id_dsa id_dsa.pub id_rsa id_rsa.pub ssh_config'
    for FILE in $FILELIST; do
        if [ -f "/root/.ssh/$FILE" ]; then
            rm -r /root/.ssh/$FILE
        fi
    done
}

function cleanup_disks() {
    echo "removing /dev/vdb entries from fstab"
    sed -i '/^\/dev\/vdb/d' /etc/fstab
}

function cleanup_metadata() {
    # TODO: these still the used locations?
    rm -f var/run/smartdc/user-script
    rm -f var/lock/smartdc/user-script.lock
}

function cleanup_hostname() {
    rm -f /etc/hostname
    touch /etc/hostname
}

function prepare_centos() {
    # Cleaning up network devices.

    if [[ -f /etc/udev/rules.d/70-persistent-net.rules ]] ; then
        rm -f /etc/udev/rules.d/70-persistent-net.rules
    fi

    find /etc/sysconfig/network-scripts -name "ifcfg-eth*" | xargs rm -f

    if [[ -d /var/lib/dhcp3 ]] ; then
        find /var/lib/dhcp3 -type f -name "*.leases" | xargs rm -f
    elif [[ -d /var/lib/dhcp ]] ; then
        find /var/lib/dhcp -type f -name "*.leases" | xargs rm -f
    elif [[ -d /var/lib/dhclient ]] ; then
        find /var/lib/dhclient -type f | xargs rm -f
    fi

    # Create a eth0, eth1 and loopback by default
    if [[ -d /etc/sysconfig/network-scripts ]] ; then
        echo "# Created by Joyent linux-prepare-image" >> /etc/sysconfig/network-scripts/ifcfg-eth0
        echo "DEVICE=\"eth0\"" >> /etc/sysconfig/network-scripts/ifcfg-eth0
        echo "ONBOOT=\"yes\"" >> /etc/sysconfig/network-scripts/ifcfg-eth0
        echo "BOOTPROTO=\"dhcp\"" >> /etc/sysconfig/network-scripts/ifcfg-eth0

        echo "# Created by Joyent linux-prepare-image" >> /etc/sysconfig/network-scripts/ifcfg-eth1
        echo "DEVICE=\"eth1\"" >>  /etc/sysconfig/network-scripts/ifcfg-eth1
        echo "ONBOOT=\"yes\"" >> /etc/sysconfig/network-scripts/ifcfg-eth1
        echo "BOOTPROTO=\"dhcp\"" >> /etc/sysconfig/network-scripts/ifcfg-eth1

        echo "# Created by Joyent linux-prepare-image" > /etc/sysconfig/network-scripts/ifcfg-lo
        echo "DEVICE=lo" >> /etc/sysconfig/network-scripts/ifcfg-lo
        echo "IPADDR=127.0.0.1" >> /etc/sysconfig/network-scripts/ifcfg-lo
        echo "NETMASK=255.0.0.0" >> /etc/sysconfig/network-scripts/ifcfg-lo
        echo "NETWORK=127.0.0.0" >> /etc/sysconfig/network-scripts/ifcfg-lo
        echo "BROADCAST=127.255.255.255" >> /etc/sysconfig/network-scripts/ifcfg-lo
        echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-lo
        echo "NAME=loopback" >> /etc/sysconfig/network-scripts/ifcfg-lo
    fi

    # Cleaning up package cache.
    yum clean all 2>&1 >/dev/null

    # Make sure locale is set to prevent error when system is SSH'ed into.
    localedef --no-archive -i en_US -f UTF-8 en_US.UTF-8
}

function prepare_ubuntu() {
    # Cleaning up network devices.
    if [[ -f /etc/udev/rules.d/70-persistent-net.rules ]] ; then
        rm -f /etc/udev/rules.d/70-persistent-net.rules
    fi

    if [[ -d /var/lib/dhcp3 ]] ; then
        find /var/lib/dhcp3 -type f -name "*.leases" | xargs rm -f
    elif [[ -d /var/lib/dhcp ]] ; then
        find /var/lib/dhcp -type f -name "*.leases" | xargs rm -f
    fi

    if [[ -f /etc/network/interfaces ]] ; then
        rm -f /etc/network/interfaces
        out=$(dpkg-reconfigure ifupdown 2>&1 > /dev/null)
        echo "" >> /etc/network/interfaces
        echo "auto eth0" >> /etc/network/interfaces
        echo "iface eth0 inet dhcp" >> /etc/network/interfaces
        echo "auto eth1" >> /etc/network/interfaces
        echo "iface eth1 inet dhcp" >> /etc/network/interfaces
    fi
}

# Makes sure that all is in /lib/smartdc and configured for production.
function check_lib_smartdc() {
    local DISTRO=$1

    local FILELIST=''
    if [[ $DISTRO == "centos" ]]; then
        FILELIST='redhat-powerbtn-acpi-support.sh format-secondary-disk joyent_rc.local lib_smartdc_scripts.cfg mdata-get run-user-script send-arp-updates set-root-authorized-keys'
    elif [[ $DISTRO == "ubuntu" ]]; then
        FILELIST='format-secondary-disk joyent_rc.local lib_smartdc_scripts.cfg mdata-get run-user-script send-arp-updates set-root-authorized-keys'
    elif [[ $DISTRO == "debian" ]]; then
        FILELIST='format-secondary-disk joyent_rc.local lib_smartdc_scripts.cfg mdata-get run-user-script send-arp-updates set-root-authorized-keys'
    fi
    for name in $FILELIST; do
        if [ ! -f "/lib/smartdc/$name" ]; then
            fatal "Missing needed file - /lib/smartdc/$name"
        fi
    done

    LINKLIST='product'
    for LINK in $LINKLIST; do
        if [ ! -L "/etc/$LINK" ]; then
            fatal "Missing symlink - /etc/$LINK"
        fi
    done

    OUT=`grep -e "^(/lib/smartdc/joyent_rc.local)" /etc/rc.local`
    if [ -z $OUT ]; then
        fatal "Missing call in /etc/rc.local to /lib/smartdc/joyent_rc.local"
    fi

    chown -R root:root /lib/smartdc
}



#---- mainline

/lib/smartdc/mdata-put prepare-image:state running

# TODO: change to using lsb_* info
PRODUCT_FILE=/etc/product
if [[ ! -f $PRODUCT_FILE ]]; then
    fatal "Unknown Distribution...exiting"
fi
TARGET_DISTRO=`grep -w Image $PRODUCT_FILE | awk '{print $2;}'`

if [ $TARGET_DISTRO == "centos" ] ; then
    prepare_centos
elif [ $TARGET_DISTRO == "ubuntu" ] ; then
    prepare_ubuntu
elif [ $TARGET_DISTRO == "debian" ] ; then
    prepare_ubuntu
fi

check_lib_smartdc
cleanup_logs
cleanup_disks
cleanup_ssh
cleanup_root
cleanup_metadata
cleanup_hostname

history -c
history -w || true


/lib/smartdc/mdata-put prepare-image:state success
# Successful, but we still emit tail of trace log for info.
cat $TRACELOG | tail -n50 | /lib/smartdc/mdata-put prepare-image:error || true
sleep 3
shutdown -h now
