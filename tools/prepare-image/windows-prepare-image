# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright (c) 2018, Joyent, Inc.

$parent_path = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\VolumeCaches'
$tmp_parent_path = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer'
$expensive_cleanups = 'Update Cleanup', 'System error memory dump files'
$clean_dirs = 'c:\Windows\Temp\*', 'c:\Windows\Logs\*', 'c:\Windows\Minidump\*',
    'C:\PerfLogs\*', 'C:\Windows\Downloaded Program Files\*',
    'C:\Windows\*.log', 'C:\Users\*\AppData\Local\Temp\*'


function mput($key, $val) {
    c:\smartdc\bin\mdata-put.exe prepare-image:$key $val
}

function setting_path($id) {
    "$parent_path\$id"
}

function tmp_path($id) {
    "$tmp_parent_path\$id"
}

function error($msg) {
    echo "ERROR"
    echo $msg
    mput 'state' 'error'
    mput 'error' $msg
    exit
}


mput 'state' 'running'

foreach ($cleanup in $expensive_cleanups) {
    try {
        Move-Item -LiteralPath (setting_path $cleanup) `
            -Destination (tmp_path $cleanup) -ErrorAction Stop
    } catch [System.Management.Automation.PSInvalidOperationException] {}
}

try {
    $cleanups = (Get-Item -LiteralPath $parent_path).GetSubKeyNames()
} catch {
    error 'Unknown hive'
}

$add_auto_paths = @()
try {
    foreach ($cleanup in $cleanups) {
        $path = setting_path $cleanup
        $node = Get-Item -LiteralPath $path
        if ($node.GetValue('Autorun') -ne 1) {
            $add_auto_paths = $add_auto_paths + $path
        }
    }
} catch {
    error 'Bad Get-Item'
}

try {
    foreach ($path in $add_auto_paths) {
        Set-ItemProperty -LiteralPath $path -Name 'Autorun' `
            -Type Dword -Value 1 -ErrorAction Stop
    }
} catch {
    error 'Bad Set-Item'
}

try {
    c:\windows\system32\cleanmgr.exe /autoclean | Out-Null
} catch [System.Management.Automation.CommandNotFoundException] {
} catch {
    error 'Bad cleanmgr'
}

try {
    foreach ($path in $add_auto_paths) {
        Set-ItemProperty -LiteralPath $path -Name 'Autorun' `
            -Type Dword -Value 0 -ErrorAction Stop
    }
} catch {
    error 'Bad auto undo'
}

foreach ($cleanup in $expensive_cleanups) {
    try {
        Move-Item -LiteralPath (tmp_path $cleanup) `
            -Destination (setting_path $cleanup) -ErrorAction Stop
    } catch [System.Management.Automation.PSInvalidOperationException] {}
}

try {
     Clear-RecycleBin -Confirm:$false -ErrorAction Stop
} catch [System.ComponentModel.Win32Exception],
        [System.Management.Automation.CommandNotFoundException] {
} catch {
    error 'Bad empty recycle'
}

foreach ($path in $clean_dirs) {
    try {
        Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
    } catch {}
}


mput 'state' 'success'
