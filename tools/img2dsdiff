#!/usr/bin/env python
#
# Copyright (c) 2013, Joyent, Inc. All rights reserved.
#

"""
Show a diff of images.joyent.com images -> datasets.joyent.com datasets.

Usage:
    img2dsdiff [<options>]

Options:
    -h, --help          Print this help and exit.
    --mirror            Push changes to datasets.joyent.com.
"""

import os
import sys
import urllib2
from pprint import pprint
import difflib
import json
import copy
from os.path import realpath, dirname
from subprocess import check_call, check_output
import logging
import shutil



#---- globals/config

log = logging.getLogger('img2dsdiff')

TOP = realpath(dirname(dirname(__file__)))
IMG_UUID_SKIPS = [
    # sngl:0.99.0 is only for images.joyent.com. Only works on recent
    # (pre-6.5) platforms so don't want it exposed on datasets.jo.
    '4bf9530a-7ae5-11e2-bb4e-3bad5fbc3de9',

    # freebsd guy. Do we really want this on datasets.jo? It has
    # "jpc" as the creator_name in the URN. That's not really right
    # for datasets.jo (nor for images.jo for that matter).
    'df8d2ee6-d87f-11e2-b257-2f02c6f6ce80',
]



#---- errors

class Error(Exception):
    pass


#---- internal support stuff

def _getUrl(url):
    f = urllib2.urlopen(url)
    try:
        content = f.read()
    finally:
        f.close()
    return content

def _getJsonUrl(url):
    content = _getUrl(url)
    return json.loads(content)

all_file_paths = set()  # track all these to error on duplicates
def downgrade_image_inplace(img):
    drop = ["v", "homepage", "tags", "billing_tags"]
    for field in drop:
        if img.has_key(field):
            del img[field]

    if img["state"] != "active":
        raise ValueError("image %(uuid)s is not active: state=%(state)r" % img)
    del img["state"]

    assert not img["disabled"]
    del img["disabled"]

    assert img["public"]
    del img["public"]

    # owner fields
    img["creator_uuid"] = img["vendor_uuid"] = img["owner"]
    del img["owner"]

    img["platform_type"] = "smartos"

    if img["published_at"].endswith(':00Z'):
        img["published_at"] = img["published_at"][:-4] + 'Z'
    img["updated_at"] = img["published_at"]
    img["created_at"] = img["published_at"]

    if img.has_key("urn"):
        urn = img["urn"].split(':')
        img["cloud_name"] = urn[0]
        img["creator_name"] = urn[1]

    if img.has_key("image_size"):
        img["image_size"] = str(img["image_size"])

    if img.has_key("acl") and len(img["acl"]) == 0:
        del img["acl"]

    # Specific manual hacks for some UUIDs on datasets.jo.
    uuid = img["uuid"]

    # files
    f = img["files"][0]
    ext = {"bzip2": ".bz2", "gzip": ".gz", "none": ""}[f["compression"]]
    if uuid in (
            "da144ada-a558-11e2-8762-538b60994628",
            "d2ba0f30-bbe8-11e2-a9a2-6bc116856d85",
            "94384a12-bbeb-11e2-aec2-2bfa9742484b",
            "87c556ac-ab9d-11e2-914d-07682fcab47d",
            "3162a91e-8b5d-11e2-a78f-9780813f9142",
            "1327ed36-5130-11e2-95a8-9b5a153adf3e",
            "014e2254-a853-11e2-81c9-b318c31fa17a",
        ):
        f["path"] = "%s-%s.zfs%s" % (img["name"], img["version"], ext)
    elif uuid == "30e9e4c8-bbf2-11e2-ac3b-3b598ee13393":
        f["path"] = "%s.4-%s.zfs%s" % (img["name"], img["version"], ext)
    elif uuid == "e42f8c84-bbea-11e2-b920-078fab2aab1f":
        f["path"] = "%s-18-%s.zfs%s" % (img["name"], img["version"], ext)
    elif uuid == "46ecf60e-52c8-11e2-b212-9b51fc749547":
        f["path"] = "%s-%s-1.zfs%s" % (img["name"], img["version"], ext)
    elif uuid in (
            "e4cd7b9e-4330-11e1-81cf-3bb50a972bda",
            "71101322-43a5-11e1-8f01-cf2a3031a7f4",
        ):
        f["path"] = "%s-1.0.0.zvol%s" % (img["name"], ext)
    elif img["type"] == "zvol":
        f["path"] = "%s-%s.zvol%s" % (img["name"], img["version"], ext)
    else:
        f["path"] = "%s-%s.zfs%s" % (img["name"], img["version"], ext)
    if f["path"] in all_file_paths:
        raise ValueError("duplicate file 'path': %r" % f["path"])
    all_file_paths.add(f["path"])
    f["url"] = "https://datasets.joyent.com/datasets/%s/%s" % (img["uuid"], f["path"])
    del f["compression"]





#---- main functionality

def img2dsdiff():
    if False:
        datasets = json.load(open('/var/tmp/datasets.json'))
        images = json.load(open('/var/tmp/images.json'))
    else:
        datasets = _getJsonUrl('https://datasets.joyent.com/datasets')
        #open('/var/tmp/datasets.json', 'w').write(json.dumps(datasets))
        images = _getJsonUrl('https://images.joyent.com/images')
        #open('/var/tmp/images.json', 'w').write(json.dumps(images))

    # Key by uuid
    datasets = dict((d['uuid'], d) for d in datasets)
    images = dict((i['uuid'], i) for i in images)

    # Find all the diffs in UUID order.
    ds_uuids = set(datasets.keys())
    img_uuids = set(images.keys())
    all_uuids = ds_uuids.union(img_uuids)
    #pprint(uuids)

    diffs = []
    for uuid in sorted(all_uuids):
        #print "--", uuid
        if uuid in ds_uuids and uuid not in img_uuids:
            diffs.append({
                "uuid": uuid, 
                "action": "delete",
                "msg": "Only in datasets.joyent.com: image %s (%s %s)" % (
                    uuid, datasets[uuid]["name"], datasets[uuid]["version"])
            })
        elif uuid not in ds_uuids and uuid in img_uuids:
            if uuid not in IMG_UUID_SKIPS:
                diffs.append({
                    "uuid": uuid, 
                    "action": "add",
                    "image": images[uuid],
                    "msg": "Only in images.joyent.com: image %s (%s %s)" % (
                        uuid, images[uuid]["name"], images[uuid]["version"])
                })
        else:
            #print "--", uuid

            i = copy.deepcopy(images[uuid])
            downgrade_image_inplace(i)

            # Note: Don't compare ownership, that's all messed up btwn
            # 'admin' or 'all zeros' in images.jo vs 'sdc' user uuid in
            # datasets.jo.
            d = copy.deepcopy(datasets[uuid])
            del d["creator_uuid"]
            del d["vendor_uuid"]
            del i["creator_uuid"]
            del i["vendor_uuid"]

            # Comparing times for images mirrored from images.jo
            # to dataset.jo is a fools errand, because datasets.jo
            # import overrides those values.
            for field in ["created_at", "published_at", "updated_at"]:
                del d[field]
                del i[field]

            d_str = json.dumps(d, indent=2, sort_keys=True)
            downgraded_i_str = json.dumps(i, indent=2, sort_keys=True)
            diff = list(difflib.unified_diff(
                downgraded_i_str.splitlines(True),
                d_str.splitlines(True),
                'https://images.joyent.com/images/' + uuid,
                'https://datasets.joyent.com/datasets/' + uuid,
                ))
            #pprint(diff)
            diff_str = ''.join(diff)
            if diff_str:
                diffs.append({
                    "uuid": uuid,
                    "action": "diff", 
                    "msg": diff_str
                })
    return diffs

def _indent(s, indent='    '):
    return indent + indent.join(s.splitlines(True))

def run(argv):
    from subprocess import check_call
    print ' '.join(argv)
    check_call(argv, shell=True)

def add_image(image):
    CONFIG = json.loads(open('/root/config/img2dsdiff.config.json').read())

    dataset = copy.deepcopy(image)
    downgrade_image_inplace(dataset)
    uuid = dataset["uuid"]

    # Force ownership to 'sdc' user.
    # We are forcing the ownership/creator_uuid to the 'sdc'
    # user (uuid 352971aa-31ba-496c-9ade-a379feaecd52) because
    # DSAPI gets picky if you don't match that and the 'sdc'
    # creator_name (from the urn). We *could* support 'jpc' if we
    # need to, but really those shouldn't go on datasets.jo.
    assert dataset["creator_name"] == "sdc", "We only want 'sdc' as the creator_name here, not '%s'" % dataset["creator_name"]
    dataset["creator_uuid"] = dataset["vendor_uuid"] = '352971aa-31ba-496c-9ade-a379feaecd52'

    tmpd = '/var/tmp/img2dsdiff.%s.%s' % (os.getpid(), uuid)
    os.makedirs(tmpd)

    print "Image manifest on images.jo:"
    print _indent(json.dumps(image, indent=2, sort_keys=True))

    print "Dataset manifest downgraded for datasets.jo:"
    dataset_str = json.dumps(dataset, indent=2, sort_keys=True)
    print _indent(dataset_str)
    open(os.path.join(tmpd, 'dsmanifest'), 'w').write(dataset_str)

    print "Download the image file"
    check_call([
        '/opt/local/bin/curl', '-kOsS', 'http://localhost:8080/images/%s/file' % uuid,
    ], cwd=tmpd)

    print "Push to datasets.joyent.com"
    print check_output([
        '/opt/local/bin/curl', '-sSi',
        # Note: presuming no url encoding of user/pass necessary here.
        'https://%s:%s@datasets.joyent.com/datasets/%s' % (
            CONFIG["dsapi_user"], CONFIG["dsapi_password"], uuid),
        '-X', 'PUT',
        '-F', 'manifest=@dsmanifest',
        '-F', '%s=@file' % dataset["files"][0]["path"]
    ], cwd=tmpd)

    shutil.rmtree(tmpd)



#---- mainline

def main(argv):
    if '-h' in argv or '--help' in argv:
        sys.stdout.write(__doc__)
        return
    diffs = img2dsdiff()
    if '--mirror' in argv:
        for diff in diffs:
            uuid = diff["uuid"]
            action = diff["action"]
            if action == "add":
                print "Add image %s to datasets.joyent.com" % uuid
                add_image(diff["image"])
            elif action == "delete":
                print "*Skipping* delete of image %s from datasets.joyent.com" % uuid
            elif action == "diff":
                print "Image %s differs on datasets.joyent.com (what to do?)" % uuid
                print diff["msg"]
    else:
        for diff in diffs:
            print diff["msg"]


## {{{ http://code.activestate.com/recipes/577258/ (r5+)
if __name__ == "__main__":
    try:
        retval = main(sys.argv)
    except KeyboardInterrupt:
        sys.exit(1)
    except SystemExit:
        raise
    except:
        import traceback, logging
        if not log.handlers and not logging.root.handlers:
            logging.basicConfig()
        skip_it = False
        exc_info = sys.exc_info()
        if hasattr(exc_info[0], "__name__"):
            exc_class, exc, tb = exc_info
            if isinstance(exc, IOError) and exc.args[0] == 32:
                # Skip 'IOError: [Errno 32] Broken pipe': often a cancelling of `less`.
                skip_it = True
            if not skip_it:
                tb_path, tb_lineno, tb_func = traceback.extract_tb(tb)[-1][:3]
                log.error("%s (%s:%s in %s)", exc_info[1], tb_path,
                    tb_lineno, tb_func)
        else:  # string exception
            log.error(exc_info[0])
        if not skip_it:
            if log.isEnabledFor(logging.DEBUG):
                traceback.print_exception(*exc_info)
            sys.exit(1)
    else:
        sys.exit(retval)
## end of http://code.activestate.com/recipes/577258/ }}}

