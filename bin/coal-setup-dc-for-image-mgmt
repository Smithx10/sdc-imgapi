#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright (c) 2014, Joyent, Inc.
#

#
# Setup this COAL DC for custom image management.
# See step by step at
# <https://mo.joyent.com/docs/imgapi/master/#use-case-5-user-creates-a-custom-image>.
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail

export PATH=/usr/bin:/usr/sbin:/smartdc/bin:/opt/smartdc/bin:/opt/local/bin:/opt/local/sbin:/opt/smartdc/agents/bin



#---- support stuff

function fatal {
    echo "$0: fatal error: $*"
    exit 1
}

function cleanup {
    true
}

function errexit {
    cleanup
    [[ $1 -ne 0 ]] || exit 0
    fatal "error exit status $1"
}


function provision_cloudapi {
    vmadm lookup -1 alias=cloudapi0 2>/dev/null >/dev/null && return
    echo "# Provision cloudapi"
    cat <<EOM | sapiadm provision
{
    "service_uuid": "$(sdc-sapi /services?name=cloudapi | json -H 0.uuid)",
    "params": {
        "alias": "cloudapi0",
        "networks": [
            {
                "uuid": "$(sdc-napi /networks?name=admin | json -H 0.uuid)"
            },
            {
                "uuid": "$(sdc-napi /networks?name=external | json -H 0.uuid)",
                "primary": true
            }
        ]
    }
}
EOM
}

function hack_dapi_for_headnode_provisioning {
    local cnapi_zone=$(vmadm lookup -1 alias=cnapi0)
    # TODO: don't change if already done
    echo "# Hack DAPI to allow headnode provisioning"
    local config_path=/zones/$cnapi_zone/root/opt/smartdc/cnapi/sapi_manifests/cnapi/template
    sed -e "
        s:hard-filter-headnode:identity:g;
        s:hard-filter-min-ram:identity:g;
        s:hard-filter-min-disk:identity:g;
        s:hard-filter-min-cpu:identity:g;
        " $config_path >$config_path.new
    mv $config_path.new $config_path
    svcadm -z $cnapi_zone restart config-agent
}

function add_external_nic_to_some_core_zones {
    local external_uuid=$(sdc-napi /networks?name=external | json -H 0.uuid)

    for alias in adminui0 imgapi0 amon0 sdc0; do
        local zone_uuid=$(vmadm lookup -1 alias=$alias)
        local have_external=$(sdc-vmapi /vms/$zone_uuid \
            | json -H nics | json -c 'this.nic_tag=="external"' length)
        if [[ "$have_external" == "0" ]]; then
            echo "# Add external nic to $alias"
            sdc-vmapi /vms/$zone_uuid?action=add_nics -X POST -d@- <<EOP | sdc sdc-waitforjob || true
            {
                "networks": [{"uuid": "$external_uuid", "primary": true}]
            }
EOP
            echo ""
            echo "sleep for 30 for zone to reboot"
            sleep 30  # necessary for when we're rebooting zones hosting this process
        fi
    done
}

function install_base_image {
    # TODO: Use a local cache to avoid slow downloads.
    local uuid=2b683a82-a066-11e3-97ab-2faa44701c5a # base 13.4.0
    sdc-imgadm get $uuid >/dev/null 2>/dev/null && return
    echo "# Install base image"
    sdc-imgadm import $uuid -S https://images.joyent.com --skip-owner-check
}

function imgapi_to_allow_local_custom_images {
    echo '{"metadata": {"IMGAPI_ALLOW_LOCAL_CREATE_IMAGE_FROM_VM": true}}' \
        | sapiadm update $(sdc-sapi /services?name=imgapi | json -H 0.uuid)
}



#---- mainline

trap 'errexit $?' EXIT
START=$(date +%s)

echo "# Prepare this COAL DC for custom image management."

[[ $(zonename) == "global" ]] || fatal "must run this from the global zone"
[[ $(bash /lib/sdc/config.sh -json | json datacenter_name) == "coal" ]] \
    || fatal "datacenter_name is not COAL, refusing to run"

provision_cloudapi
hack_dapi_for_headnode_provisioning
# TODO: how to offer alternative to hook up to remote Manta?
imgapi_to_allow_local_custom_images
add_external_nic_to_some_core_zones
install_base_image



END=$(date +%s)
echo "$0 finished in $(($END - $START)) seconds"

