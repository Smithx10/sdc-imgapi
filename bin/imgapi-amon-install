#!/usr/bin/bash
# vi: expandtab sw=4 ts=4
#
# Install Amon probes for IMGAPI.
#

if [[ -n "$TRACE" ]]; then
    export PS4='${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit


#---- globals, config

res_status=
res_body=


eval $(cat /opt/smartdc/etc/zoneconfig)
AMON_URL=http://$(echo $AMON_ADMIN_IPS | cut -d, -f1)



#---- functions

function fatal {
    echo "$(basename $0): error: $1"
    exit 1
}

# Call the amon master.
function amon() {
    local path=$1
    shift
    local curl_args="-sS -i -H accept:application/json -H content-type:application/json" 
    local res=$(curl $curl_args --url "$AMON_URL$path" "$@")
    res_status=$(echo "$res" | head -1 | awk '{print $2}')
    res_body=$(echo "$res" | json -Hq)
}

function putprobe() {
    local account=$1
    local monname=$2
    local pname=$3
    local payload=$4
    amon /pub/$account/monitors/$monname/probes/$pname
    if [[ "$res_status" == "200" ]]; then
        echo "Probe '$pname' already exists."
    elif [[ "$res_status" == "404" ]]; then
        echo "Create probe '$pname'."
        amon /pub/$account/monitors/$monname/probes/$pname -X PUT -f --data "$payload"
    else
        fatal "Error getting probe '$pname': $res_status $res_body"
    fi
}



#---- mainline

zonename=$(zonename)
account=$UFDS_ADMIN_UUID

amon /ping

# We'll create a single monitor for this imgapi zone.
# It would be nice to name it after the zone *alias*, but
# we'd need to depend on VMAPI to get that: overkill.
monname=imgapi-$zonename
amon /pub/$account/monitors/$monname
if [[ "$res_status" == "200" ]]; then
    echo "Monitor '$monname' already exists."
elif [[ "$res_status" == "404" ]]; then
    echo "Create monitor '$monname'."
    amon /pub/$account/monitors/$monname -X PUT -f -d '{
      "contacts": ["email"]
    }'
else
    fatal "Error getting monitor '$monname': $res_status $res_body"
fi


# Probe: Monitor the zone going down/up.
putprobe $account $monname up "{
    \"type\": \"machine-up\",
    \"agent\": \"$zonename\"
}"

# Probe: Monitor FATALs in the imgapi service log.
# TODO: use an smf-log-scan probe type when available.
putprobe $account $monname log-fatal "{
    \"type\": \"log-scan\",
    \"agent\": \"$zonename\",
    \"config\": {
        \"path\": \"/var/svc/log/smartdc-site-imgapi:default.log\",
        \"regex\": \"\\\"level\\\":60,\"
    }
}"

# Probe: Monitor ERRORs in the imgapi service log.
# TODO: use an smf-log-scan probe type when available.
putprobe $account $monname log-error "{
    \"type\": \"log-scan\",
    \"agent\": \"$zonename\",
    \"config\": {
        \"path\": \"/var/svc/log/smartdc-site-imgapi:default.log\",
        \"regex\": \"\\\"level\\\":50,\"
    }
}"

# Probe: Monitor the imgapi service stopping.
# TODO: use an smf probe type when available.
putprobe $account $monname imgapi-service "{
    \"type\": \"log-scan\",
    \"agent\": \"$zonename\",
    \"config\": {
        \"path\": \"/var/svc/log/smartdc-site-imgapi:default.log\",
        \"regex\": \"Stopping because\"
    }
}"




