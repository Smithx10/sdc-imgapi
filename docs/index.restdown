---
title: Image API (IMGAPI)
markdown2extras: wiki-tables, code-friendly, cuddled-lists
apisections: Miscellaneous API, Images API
---

# Image API (IMGAPI)

TODO



# API Summary

||**Name**||**Endpoint**||**Notes**||
||[ListImages](#ListImages)||GET /images||List available images.||
||[GetImage](#GetImage)||GET /images/:uuid||Get a particular image manifest.||
||[GetImageFile](#GetImageFile)||GET /images/:uuid/file||Get the file for this image.||
||[DeleteImage](#DeleteImage)||DELETE /images/:uuid||Delete an image (and its file).||
||[CreateImage](#CreateImage)||POST /images||Create a new (unactivated) image from a manifest.||
||[AddImageFile](#AddImageFile)||PUT /images/:uuid/file||Upload the image file.||
||[ActivateImage](#ActivateImage)||POST /images/:uuid?action=activate||Activate the image.||
||[UpdateImage](#UpdateImage)||POST /images/:uuid?action=update||**NYI** Update image manifest fields. This is limited. Some fields are immutable.||
||[DisableImage](#DisableImage)||POST /images/:uuid?action=disable||**NYI** Disable the image.||
||[EnableImage](#EnableImage)||POST /images/:uuid?action=enable||**NYI** Enable the image.||
||[MigrateImage](#MigrateImage)||POST /images/$uuid?action=migrate&dc=us-west-1||**NYI** Migrate one of "my" images from another DC.||
||[AdminImportImage](#AdminImportImage)||POST /images/$uuid?action=import||**NYI** Only for operators to import an image with a specified UUID.||



# Errors

TODO



# Image manifest data

An image manifest is all the data about an image except the image file itself.
Generally this is represented as a JSON object. For example:

    {
      "uuid": "63ce06d8-7ae7-11e0-b0df-1fcf8f45c5d5",
      "state": "active",
      "disabled": false,
      "type": "zone-dataset",
      "name": "base"
      "version": "2.0.0",
      "description": "Base template to build other templates on",
      "published_at": "2011-05-10T09:25:12Z",
      "os": "smartos",
      // TODO:
      "creator_uuid": "930896af-bf8c-48d4-885c-6573a94b1853",  //XXX or owner_uuid? look at other data
      "files": [
        {
          "path": "smartos-1.3.13.zfs.bz2",
          "sha1": "a287dc535e2fb9a5a8e26b211156016b4e6cf267",
          "size": 41982720
        }
      ],
      "requirements": {
        "networks": [
          {
            "name": "net0",
            "description": "public"
          }
        ]
      }
    }

A summary of fields (details are provided below)

||**Field**||**Type**||**Always Present?**||**Notes**||
||[uuid](#manifest-uuid)||UUID||Yes||The unique identifier for a UUID. This is set by the IMGAPI server. See details below.||
||[owner](#manifest-owner)||UUID||Yes||The UUID of the owner of this image (the account that created it).||
||[name](#manifest-name)||String||Yes||A short name for this image. Max 512 characters (though practical usage should be much shorter). No uniqueness guarantee.||
||[version](#manifest-version)||String||Yes||A version string for this image. Max 128 characters. No uniqueness guarantee.||
||[description](#manifest-description)||String||No||A short description of the image.||
||[state](#manifest-state)||String||Yes||The current state of the image. One of 'active', 'unactivated', 'disabled'.||
||[disabled](#manifest-disabled)||Boolean||Yes||Indicates if this image is available for provisioning.||
||[public](#manifest-public)||Boolean||Yes||Indicates if this image is publicly available.||
||[published_at](#manifest-published_at)||Date||Yes\*||The date at which the image is activated). Set by the IMGAPI server.||
||[type](#manifest-type)||String||Yes||The image type. One of "zone-dataset" for a ZFS dataset used to create a new SmartOS zone, or "zvol" for a virtual machine image.||
||[os](#manifest-os)||String||Yes||The OS family this image provides. One of "smartos", "windows", "linux" or "other".||
||[files](#manifest-files)||Array||Yes\*||An array with a single object describing the image file.||
||[acl](#manifest-acl)||Array||No||Access Control List. An array of account UUIDs given access to a private image. The field is only relevant to private images.||
||[requirements](#manifest-requirements)||Object||No||A set of named requirements for provisioning a VM with this image||
||[requirements.networks](#manifest-requirements-networks)||Array||No||TODO:doc||
||[requirements.ssh_key](#manifest-requirements-ssh-key)||Boolean||No||TODO:doc||
||[requirements.min_ram](#manifest-requirements-min-ram)||Integer||No||TODO:doc||
||[requirements.max_ram](#manifest-requirements-max-ram)||Integer||No||TODO:doc||
||[users](#manifest-users)||Array||No||A list of users for which passwords should be generated for provisioning. This may only make sense for some images. Example: `[{"name": "root"}, {"name": "admin"}]`||
||[generate_passwords](#manifest-generate-passwords)||Boolean||No||A boolean indicating whether to generate passwords for the users in the "users" field. If not present, the default value is true.||

An always present value of "Yes\*" means that this field will always be
present for *activated* images.

<!--
TODO: the optional ones
TODO: bwcompat ones and new ones from datasets.joyent.com/docs
TODO: new ones from design.restdown section
TODO: compare validtion with rules in mapi/models/dataset.rb
-->

## Manifest: uuid

An image `uuid` is the unique identifier for this UUID. This is what you
use to provision a VM. (For backwards compatibility unique identification
via a `urn` field is supported for legacy images. See the [urn section
below](#manifest-urn).)

An image UUID is create by the server on the [CreateImage](#CreateImage).
There are two exceptions: (1) The [MigrateImage](#MigrateImage) endpoint will
copy an image between two datacenters in the same cloud and persist the
UUID. (2) SDC operators can use the [AdminImportImage](#AdminImportImage)
to add an image with a specified UUID. In the latter case it is the
responsibility of the operator to ensure a given UUID is not duplicated,
or refers to different image data between separate clouds. A common case
for the latter is importing "core" Joyent-provided images from
<https://images.joyent.com>.


## Manifest: owner

The account UUID of the owner/creator of this image.




## Manifest: name

TODO: docs


## Manifest: version

A version string for this image. Maximum 128 characters. This is an opaque
string, i.e. no particular format or structure is enforced and
no ordering with other versions is implied. However, it is strongly suggested
that the [semver](http://semver.org/) versioning scheme be
followed. Further, the simple `Major.Minor.Patch` semver subset is ideal.

Note that image `name` and `version` do not make a unique identifier for
an image. Separate users (and even the same user) can create images with
the same name and version. The image `uuid` is the only unique identifier
for an image.


## Manifest: description

TODO: docs


## Manifest: state

The current state of the image. One of the following values:

||**State**||**Description**||
||active||The image is ready for use, i.e. VMs can be provisioned using this image.||
||unactivated||The image has not yet been activated. See [ActivateImage](#ActivateImage).||
||disabled||The image is disabled. This will be the state if the image is activated, but also `disabled == true`. See [EnableImage](#EnableImage) and [DisableImage](#DisableImage).||



## Manifest: disabled

TODO: docs, show how to change this with DisableImage


## Manifest: public

TODO: docs, show how to change this



## Manifest: published_at

TODO: docs, server-set (same exceptions as UUID above)


## Manifest: type

The type of the image file. Must be one of:

||**OS**||**DESCRIPTION**||
||zone-dataset||a ZFS dataset used to create a new SmartOS zone||
||zvol||a KVM virtual machine image||


## Manifest: os

The operating system of the image file. Must be one of:

||**OS**||**NOTES**||
||smartos||SmartOS||
||linux||Linux, e.g. CentOS, Ubuntu, etc.||
||windows||A Microsoft Windows OS image||
||other||A catch-all for other operating systems.||


## Manifest: files
TODO: doc files

## Manifest: acl
TODO: doc acl

## Manifest: requirements

A grouping of various requirements for provisioning a VM with this image.

## Manifest: requirements.networks

Optional. An array describing the minimum number of network interfaces. This
example shows a dataset that requires one VNIC:

    {
        ...
        "requirements": {
            "networks": [{"name": "net0", "description": "public"}]
            ...
        },
        ...
    }

## Manifest: requirements.ssh_key

Optional. A boolean indicating that provisioning with this dataset requires
that an SSH public key be provided. For example, provisioning a Linux VM
requires an SSH key for initial SSH access. If not defined, it is presumed to
be false.

## Manifest: requirements.min_ram

Optional. `min_ram` is an integer number of MiB specifying the minimum RAM
required to provision this image. If `max_ram` is also specified, then
`min_ram <= max_ram` must be true.

## Manifest: requirements.max_ram

Optional. `max_ram` is an integer number of MiB specifying the maximum RAM
this image may provisioned with. If `min_ram` is also specified, then
`min_ram <= max_ram` must be true.

## Manifest: users

Optional. `users` is a list of users for which passwords should be generated
for provisioning. This may only make sense for some datasets. Example:

    "users": [{"name": "root"}, {"name": "admin"}]

## Manifest: generate_passwords

Optional. `generate_passwords` is a boolean indicating whether to generate
passwords for the users in the "users" field. If not present, the default
value is true.



# Use Cases

Here we look at some SDC use cases that touch on IMGAPI, and hence drive
its design.


## Use Case: Headnode setup installs core zones' images

"headnode.sh" (see "/var/svc/log/system-smartdc-init:default.log") calls
this:

    imgadm install -m ${ds_manifest} -f ${ds_filename}

This will never directly touch IMGAPI, because IMGAPI itself is created
by this headnode setup. However this bootstraping is relevant for context.
In this case, the image file and manifest are locally provided on the USB
key.

TODO: As part of the 'imgapi' zone setup, these core images should be
added. They use local disk storage (actually assets mounted from
"/usbkey/imgapi").



## Use Case: Operator adds new public image via operator portal

Operator uses operator portal (adminui) to import a new image from
https://images.joyent.com.

TODO: fill this in


## Use Case: Operator adds a new image just for this cloud

Operator uses operator portal (adminui) to add a new image to this DC.


## Use Case: User provisions with a public image

TODO: fill this in


## Use Case: User adds an custom image and provisions with it

TODO: fill this in

## Use Case: User easily gets custom image from an Ubuntu ISO

Mark:

    i would like it to be that i _start_ in JPC with imgadm as ISO images
    i.e., i say "here's the ubuntu ISO image" i want to boot off of.
    i then do whatever the fuck i want to my VM
    i take a snapshot. and right there, that's now a new image available to me and anyone i share with (later)

Q: how do I create an image from an ISO. Say a slackware, debian or whatever ISO?



## Image file storage

There are three possible storage mechanisms for the (large) image files.
Which are in use depend on the IMGAPI configuration (and availability
in the DC).

1. manta: Requires an available Manta for this DC's region. All files are
   store in the "imgapi" user's Manta area.
2. dcls: Data Center Local Storage.
   TODO: details from wdp how this would be used.
3. local: A local dir (or locally mounted dir). Only useful for testing and
   development. This is insufficient for production usage because a locally
   mounted dir can't handle HA (imgapi zones on more than one server).

The set of available storages is set in the configuration. E.g.:

    "storage": {
        "manta": {
            "url": "https://manta.bh1-kvm1.joyent.us",   // or something
            "user": "imgapi",
            "password": "***"
        },
        "dcls": {
            "dir": "/mnt/share/imgapi"
        },
        "local": {
            "dir": "/var/db/imgapi"
        }
    }

A production setup needs at least one of "manta" or "dcls" storage, where
"production" is defined as running without the `IMGAPI_DEVELOPMENT` envvar
defined (with a non-empty string value). Likewise, usage of "local" is only
allowed if `IMGAPI_DEVELOPMENT` is set.

When adding an image file the storage used is determined as follows:

- if "manta" is available, use that
- else if "dcls" is available, use that
- else if "local" is available, use that


Open questions (TODO):

- Do we need more control than the above storate determination?
- Should 'dcls' usage be limited to a set of users? Or have a config item
  to limit the set of users that can use it. If so, then need an endpoint
  to update that config.



# Images API

An "image" object is the metadata for an image file.
In the API, an image contains the following fields:

||**Field**||**Type**||**Description**||
||uuid||String||The UUID of the image.||
||name||String||XXX||
||XXX||String||XXX...||


## ListImages (GET /images)

List images. Without query params this returns all active
(`state === "active"`) images.

There are two typical calling styles to this endpoint: with 'account=$UUID' and
without. The former is what cloudapi uses to ask on behalf of a particular
authenticated account. The latter is for operator-only querying.

### Inputs

||**Field**||**Type**||**Description**||
||account||UUID||Only list images visible to this account. A user can only see: (a) active public images, (b) active private images for which they are listing in the ACL, and (c) their own images.||
||owner||UUID||Only list images owned by this account.||
||state||String||List images with the given state. Can be one of 'active' (the default), 'disabled', 'unactivated' or 'all'.||
||name||String||List images with the given name. Prefix with `~` to do a substring match (case-*sensitive*). E.g., `~foo`.||
||version||String||List images with the given version.||
||public||Boolean||List just public or just private images.||
||os||String||List images with the given os.||
||type||String||List images of the given type.||

### Returns

An array of image objects.

### Errors

TODO: errors

### Example

    $ sdc-imgapi /images
    TODO: example


## GetImage (GET /images/:uuid)

Get a image by uuid.

There are two typical calling styles to this endpoint: with 'account=$UUID' and
without. The former is what cloudapi uses to ask on behalf of a particular
authenticated account. The latter is for operator-only querying.

### Inputs

||**Field**||**Type**||**Description**||
||account||UUID||Only return an image visible to this account. A user can only see: (a) active public images, (b) active private images for which they are on the ACL, and (c) their own images.||

### Returns

An image object.

### Errors

TODO: errors

### Example

    $ sdc-imgapi /images/f9bbbc9f-d281-be42-9651-72c6be875874
    TODO: example


## GetImageFile (GET /images/:uuid/file)

Get the image file.

### Inputs

None.

### Returns

The (typically large) image file content.

### Errors

TODO: errors

### Example

    $ sdc-imgapi /images/f9bbbc9f-d281-be42-9651-72c6be875874/file -o image.zfs.bz2


## DeleteImage (DELETE /images/:uuid)

Delete this image (and its file, if any).

### Inputs

None.

### Returns

Responds with HTTP 204 (No Content).

### Errors

TODO: errors

### Example

    $ sdc-imgapi /images/f9bbbc9f-d281-be42-9651-72c6be875874/file -X DELETE


## CreateImage (POST /images)

Create a new (unactivated) image from a manifest. The typical process is to
subsequently call [AddImageFile](#AddImageFile) and then
[ActivateImage](#ActivateImage) to finish with an image available for
provisioning.

### Inputs

||**Field**||**Type**||**Required?**||**Default**||**Notes**||
||account||UUID||Yes\*||-||The account UUID on behalf of whom this request is being made. If given and if relevant, authorization will be done for this account. At least one of `account` or `owner` is required. It is expected that all calls originating from a user (e.g. from cloudapi) will provide this parameter.||
||[owner](#manifest-owner)||UUID||Yes\*||-||The UUID of the owner of this image (the account that created it). If not given, the given `account` is used. At least one of `account` or `owner` is required.||
||[name](#manifest-name)||String||Yes||-||A short name (and optionally version) for this image. Max 512 characters. No uniqueness guantee.||
||[version](#manifest-version)||String||Yes||A version string for this image. Max 128 characters. No uniqueness guarantee.||
||[description](#manifest-description)||String||No||-||A short description of the image.||
||[disabled](#manifest-disabled)||Boolean||No||false||Indicates if this image should be available for provisioning.||
||[public](#manifest-public)||Boolean||No||false||Indicates if this image is publicly available.||
||[type](#manifest-type)||String||Yes||-||The image type. One of "zone-dataset" for a ZFS dataset used to create a new SmartOS zone, or "zvol" for a virtual machine image.||
||[os](#manifest-os)||String||Yes||-||The OS family this image provides. One of "smartos", "windows", and "linux".||
||[acl](#manifest-acl)||Array||No||-||Access Control List. An array of account UUIDs given access to a private image. The field is only relevant to private images.||
||[requirements](#manifest-requirements)||Object||No||-||A set of named requirements for provisioning a VM with this image. See [the requirements docs](#manifest-requirements) above for supported fields.||
||[users](#manifest-users)||Array||No||-||A list of users for which passwords should be generated for provisioning. This may only make sense for some images. Example: `[{"name": "root"}, {"name": "admin"}]`||
||[generate_passwords](#manifest-generate-passwords)||Boolean||No||-||A boolean indicating whether to generate passwords for the users in the "users" field. If not present, the default value is true.||

The following extra inputs are allowed for operator usage (typically for
backward compatibility for importing old SDC6-era datasets). Here "operator
usage" means that the `account` field is NOT provided:

||**Field**||**Type**||**Required?**||**Default**||**Notes**||
||[urn](#manifest-urn)||String||No||-||An old SDC6 dataset URN, e.g. "sdc:sdc:smartos:1.6.3". Dataset URNs are only supported for backward compatibility. New images cannot have a URN.
||[published_at](#manifest-published-at)||Date||No||-||The time at which this image/dataset was published (a.k.a. made active).||


TODOs:

- TODO: urn in CreateImage
- TODO: support get by URN
- TODO: inherited_directories field
- TODO: nic_driver field
- TODO: disk_driver field
- TODO: cpu_type field
- TODO: image_size field
- TODO: document dropped/deprecated 6.5 fields and why: platform_type, urn,
  version,


### Returns

The (unactivated) image object.

### Errors

TODO: errors

### Example

    $ sdc-imgapi /images -X POST \
        --data-binary '{
            "name": "foo",
            "version": "1.0.0",
            "type": "zone-dataset",
            "os": "smartos"
        }'
    TODO: example


## AddImageFile (PUT /images/:uuid/file)

Add the image file. If the image already has a file, it will be overwritten.
A file can only be added to an image that has not yet been activated. The
typical process is to call this after [CreateImage](#CreateImage), and then
subsequently call [ActivateImage](#ActivateImage) to make the image available
for provisioning, `state == "active"`.

### Inputs

The image file.

### Returns

The updated image object.

### Errors

TODO: errors

### Example

This example is using curl's `-T/--upload-file <file>` option, which results
in a PUT.

    $ sdc-imgapi /images/f9bbbc9f-d281-be42-9651-72c6be875874/file -T image.zfs.bz2


## ActivateImage (POST /images/:uuid?action=activate)

Activate the image. This makes the image available for provisioning -- the
`state` field will be "active". The image must already have had a file
uploaded via [AddImageFile](#AddImageFile). Once activated, an image cannot
be "deactivated". However it can be [*disabled*](#DisableImage) temporarily
or [*deleted*](#DeleteImage) permanently.

### Inputs

None.

### Returns

The updated image object.

### Errors

TODO: errors

### Example

    $ sdc-imgapi /images/f9bbbc9f-d281-be42-9651-72c6be875874?action=activate -X POST



## AdminImportImage (POST /images/:uuid?action=import)

Import an image (preserving its `uuid` and `published_at` fields). This is
typically used for importing an image from <https://images.joyent.com>,
Joyent's central repository of vetted SmartOS images.

This may only be used by operators. This is enforced by requiring that
`account=UUID` is NOT provided. All usage of IMGAPI on behalf of end users
is required to use `account=UUID`; operator usage (e.g. from AdminUI) is
not.

This creates an unactivated image. The typical process is to subsequently
call [AddImageFile](#AddImageFile) and then [ActivateImage](#ActivateImage)
to finish with an image available for provisioning.


### Inputs

The same fields as for [CreateImage](#CreateImage), including the SDC6-era
backward compat fields, with the following additions and changes:

||**Field**||**Type**||**Required?**||**Default**||**Notes**||
||account||UUID||No\*||-||This must NOT be provided. See the discussion above.||
||uuid||UUID||Yes||-||The existing image UUID.||
||published_at||Date||No||-||The published date/time of the image.||


### Returns

The (unactivated) image object.

### Errors

TODO: errors

### Example

    $ sdc-imgapi /images/01b2c898-945f-11e1-a523-af1afbe22822?action=import \
        -X POST --data-binary @smartos-1.6.3.dsmanifest
    TODO: example



# Miscellaneous API

## Ping (GET /ping)

A simple ping to check to health of the IMGAPI server. Here "pid" is the PID
of the IMGAPI server process. This is helpful for the test suite.

### Inputs

||**Field**||**Type**||**Description**||
||error||String||Optional. An error code name, e.g. "ResourceNotFound" to simulate an error response.||
||message||String||Optional. The error message to include in the simulated error response. Defaults to "pong".||

### Returns

When not simulating an error response, a "pong" object is returned:

||**Field**||**Type**||**Description**||
||ping||String||"pong"||
||pid||String||The PID of IMGAPI server process.||
||version||String||The version of the IMGAPI app..||

When simulating an error, the HTTP response code depends on the error type
and the response body is an JSON object with:

||**Field**||**Type**||**Description**||
||code||String||A restify error code, e.g. "ResourceNotFound", "InternalError". ||
||message||String||Error message.||

### Examples

    $ sdc-imgapi /ping
    HTTP/1.1 200 OK
    Connection: close
    Date: Wed, 02 Nov 2011 04:40:42 GMT
    Server: IMGAPI/1.0.0
    X-Api-Version: 1.0.0
    X-Request-Id: 265a6379-bbf5-4d86-bd11-5e96614035d8
    X-Response-Time: 2
    Content-Length: 15
    Content-MD5: tBwJDpsyo/hcYx2xrziwrw==
    Content-Type: application/json
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: OPTIONS, GET
    Access-Control-Allow-Headers: Accept, Content-Type, Content-Length, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time

    {
      "ping": "pong"
      "pid": 1234,
      "version": "1.0.0"
    }

Ping can also be used to simulate error responses from the IMGAPI:

    $ sdc-imgapi /ping?error=ResourceNotFound\&message=nada
    HTTP/1.1 404 Not Found
    Connection: close
    Date: Tue, 06 Dec 2011 23:43:03 GMT
    Server: IMGAPI/1.0.0
    X-Api-Version: 1.0.0
    X-Request-Id: 849950cf-e9de-452b-9640-6f4c7da053e2
    X-Response-Time: 2
    Content-Length: 44
    Content-MD5: /vxoedHxPf+L11uaQ8bkJQ==
    Content-Type: application/json
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: OPTIONS, GET
    Access-Control-Allow-Headers: Accept, Content-Type, Content-Length, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time

    {
      "code": "ResourceNotFound",
      "message": "nada"
    }


## AdminGetState (GET /state)

Return server internal state. For debugging/dev only.

### Inputs

None.

### Returns

A JSON representation of some internal state.

### Example

    $ sdc-imgapi /state
    {
      "cache": {
        ...
      },
      "log": {
        "level": 20
      },
      ...
    }



# Configuration

Reference docs on configuration vars to imgapi. Default values are in
"etc/defaults.json". Custom values are provided in a JSON file passed in with
the "-f CFG-FILE" command-line option. By default this is
"./etc/imgapi.config.json". Note that given custom values override full
top-level keys in the factory settings. For example: if providing
'ufds', one must provide the whole 'ufds' object.

||**var**||**type**||**default**||**description**||
||port||Number||8080||Port number on which to listen.||
||logLevel||String or Number||debug||Level at which to log. One of the supported Bunyan log levels. This is overridden by the `-d|--debug` switch.||
||mode||String||public||One of 'public' (default), running as a public server (e.g. images.joyent.com), or 'dc', running as the IMGAPI in an SDC datacenter.||
||auth||Object||-||If in 'public' mode, then auth details are required. 'dc' mode does no auth.||
||auth.type||String||-||One of 'basic' (HTTP Basic Auth) or 'signature' ([HTTP Signature auth](https://github.com/joyent/node-http-signature)).||
||auth.users||Object||-||Required if `auth.type === 'basic'`. A mapping of username to bcrypt-hashed password. Use the `bin/hash-basic-auth-password` tool to create the hash.||
||auth.keys||Object||-||Required if `auth.type === 'signature'`. A mapping of username to an array of ssh public keys.||
||database||Object||-||Database info. The "database" is how the image manifest data is stored.||
||database.type||String||ufds||One of 'ufds' (the default, i.e. use an SDC UFDS directory service) or 'local'. The 'local' type is a quick implementation appropriate only for smallish numbers of images.||
||database.url||String||-||LDAP URL to connect to UFDS. Required if `database.type === 'ufds'`.||
||database.rootDn||String||-||UFDS root dn. Required if `database.type === 'ufds'`.||
||database.password||String||-||UFDS root dn password. Required if `database.type === 'ufds'`.||
||database.dir||String||-||The base directory for the database `database.type === 'local'`.||
||storage||Object||-||The set of available storage mechanisms for the image *files*. There must be at least one. See the [Image file storage](#image-file-storage) section for discussion.||
||storage.manta||Object||-||TODO: doc||
||storage.dcls||Object||-||TODO: doc||
||storage.local||Object||-||TODO: doc||



# Operator Guide

This section is intended to give necessary information for diagnosing and
dealing with issues with Image API in a SmartDataCenter installation.

There is one IMGAPI per datacenter. There might actually be more than
one "imgapi" zone for HA. Use this to list the imgapi zones in a DC:

    sdc-vmapi /vms?owner_uuid=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid) \
        | json -H -c "tags.smartdc_role=='imgapi'"


## Health

An IMGAPI server has a "/ping" endpoint to indicate if it is up

    $ sdc-imgapi /ping

or if there are multiple IMGAPI servers:

    $ for ip in $(bash /lib/sdc/config.sh -json | json imgapi_admin_ips | tr ',' ' '); do \
        echo "# $ip" ; \
        curl -sS http://$ip/ping | json ; \
    done

TODO: sdc-healthcheck, sdc-webinfo


## Logs

||**service/path**||**where**||**format**||**tail -f**||
||imgapi||in each "imgapi" zone||[Bunyan](https://github.com/trentm/node-bunyan)||`` sdc-login imgapi; tail -f `svcs -L imgapi` | bunyan ``||
