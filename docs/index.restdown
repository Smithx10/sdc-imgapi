---
title: Image API (IMGAPI)
markdown2extras: wiki-tables, code-friendly, cuddled-lists
apisections: Miscellaneous API, Image API
---

# Image API (IMGAPI)

The Image API (or Images API, or IMGAPI) is the SDC7 replacement for the Dataset
API (DSAPI) in earlier versions of SDC. Along with the SmartOS `imgadm`
tool, various instances of the IMGAPI manage images in the SDC and SmartOS
ecosystem.


# Introduction

An "image" is virtual machine image content (e.g. a zfs dataset for a
SmartOS zone or a KVM machine image) plus [the metadata for the image (called
the "manifest")](#image-manifest-data). The following API instances and tools
are relevant for managing images in SDC and SmartOS.

The old DSAPI (https://datasets.joyent.com) will live until all SDC 6
instances are done. This provides Joyent-vetted images (a.k.a. datasets) for
use in SDC 6 standups. In SDC 6, MAPI (the Master API) running inside each
datacenter manages datasets within that datacenter. MAPI's "/datasets"
endpoints provide a subset of the DSAPI API.

The joyent IMGAPI (https://images.joyent.com) is the new central repository
of Joyent-vetted base images for usage in SmartOS. (Images from software
vendors may exist here, but are still vetted by Joyent.) All images here are
public -- no read auth, no private images. SmartOS' `imgadm` version 2
(the default imgadm after TODO:release-date) is configured to use this
image repository by default. SDC's operator portal (a.k.a. adminui) is
configured by default to list this repository from which to import images.
Administration of the https://images.joyent.com is via the `joyent-imgadm`
tool (currently available in <git@git.joyent.com:imgapi-cli.git>).

There is an IMGAPI in each SDC datacenter that manages images available in
that datacenter. "IMGAPI" without scoping typically refers to this IMGAPI
in a given datacenter. This is the authority for which images are available
for provisioning in that DC. The provisioning process will lazily
`zfs receive` images on CNs as necessary -- streaming from the IMGAPI
(`imgadm` on that machine handles that). IMGAPI supports private images,
customer-owned images, etc. CloudAPI speaks to IMGAPI for its
['/images'](https://mo.joyent.com/docs/cloudapi/master/#images) and legacy
['/datasets'](https://mo.joyent.com/docs/cloudapi/master/#datasets)
endpoints.

See [Use Cases](#use-cases) for details on how IMGAPI is (designed to be)
used.


# Current Status

- Good: The 'imgapi' zone is available and running in sdc with most endpoints
  implemented (see [API Summary](#api-summary)).

- Bad: Notably unimplemented is UpdateImage for modifying mutable manifest
  data on already loaded images and the MigrateImage for copying images
  between datacenters in the same SDC cloud.

- Good: `sdc-imgadm` is available in SDC GZs for managing the datacenter's
  IMGAPI from the command-line.

- Bad: IMGAPI is **not** yet being bootstrapped with manta images on
  `manta-init` because of
  [MANTA-815](https://devhub.joyent.com/jira/browse/MANTA-815).

- Bad: The replacement `imgadm` for SmartOS (imgadm v2) is **not** yet
  complete nor included in the platform. This and provisioner agent
  integration are required.

- Bad: SDC 6 backward compatibility testing hasn't been done yet. However,
  this is somewhat vetted already.

- Bad: The full process for a user creating a custom image

- Bad: A number of manifest fields remain to be added: `traits` for
  DAPI/server role handling (IMGAPI-43), `tags` for portal usage, `homepage`
  for reference to external info (e.g. a changelog) on a given image,
  `billing_tags` (IMGAPI-70), etc.

- Bad: don't yet support manta as a storage backend (though the framework
  is there for it).

- Bad: Multi-DC support (replicated manifest info in UFDS) isn't fully
  specified yet.


# API Summary

||**Name**||**Endpoint**||**Notes**||
||[ListImages](#ListImages)||GET /images||List available images.||
||[GetImage](#GetImage)||GET /images/:uuid||Get a particular image manifest.||
||[GetImageFile](#GetImageFile)||GET /images/:uuid/file||Get the file for this image.||
||[DeleteImage](#DeleteImage)||DELETE /images/:uuid||Delete an image (and its file).||
||[CreateImage](#CreateImage)||POST /images||Create a new (unactivated) image from a manifest.||
||[AddImageFile](#AddImageFile)||PUT /images/:uuid/file||Upload the image file.||
||[ActivateImage](#ActivateImage)||POST /images/:uuid?action=activate||Activate the image.||
||[UpdateImage](#UpdateImage)||POST /images/:uuid?action=update||**NYI** Update image manifest fields. This is limited. Some fields are immutable.||
||[DisableImage](#DisableImage)||POST /images/:uuid?action=disable||**NYI** Disable the image.||
||[EnableImage](#EnableImage)||POST /images/:uuid?action=enable||**NYI** Enable the image.||
||[MigrateImage](#MigrateImage)||POST /images/$uuid?action=migrate&dc=us-west-1||**NYI** Migrate one of "my" images from another DC.||
||[AdminImportImage](#AdminImportImage)||POST /images/$uuid?action=import||Only for operators to import an image and maintain `uuid` and `published_at`.||



# Errors

The full list of errors returned by the IMGAPI are described in
[errors.js](https://mo.joyent.com/imgapi/blob/master/lib/errors.js).

TODO: generate a nice table here.


# Image manifest data

An image manifest is all the data about an image except the image file itself.
Generally this is represented as a JSON object. For example:

    {
      "uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
      "owner": "352971aa-31ba-496c-9ade-a379feaecd52",
      "name": "smartos",
      "version": "1.6.3",
      "state": "active",
      "disabled": false,
      "public": true,
      "published_at": "2012-05-02T15:14:45.805Z",
      "type": "zone-dataset",
      "os": "smartos",
      "files": [
        {
          "sha1": "97f20b32c2016782257176fb58a35e5044f05840",
          "size": 46271847,
          "compression": "bzip2"
        }
      ],
      "description": "Base template to build other templates on",
      "requirements": {
        "networks": [
          {
            "name": "net0",
            "description": "public"
          }
        ]
      }
    }


A summary of fields (details are provided below):

||**Field**||**Type**||**Always Present?**||**Mutable?**||**Notes**||
||[uuid](#manifest-uuid)||UUID||Yes||No||The unique identifier for a UUID. This is set by the IMGAPI server. See details below.||
||[owner](#manifest-owner)||UUID||Yes||No||The UUID of the owner of this image (the account that created it).||
||[name](#manifest-name)||String||Yes||Yes||A short name for this image. Max 512 characters (though practical usage should be much shorter). No uniqueness guarantee.||
||[version](#manifest-version)||String||Yes||Yes||A version string for this image. Max 128 characters. No uniqueness guarantee.||
||[description](#manifest-description)||String||No||Yes||A short description of the image.||
||[state](#manifest-state)||String||Yes||No||The current state of the image. One of 'active', 'unactivated', 'disabled'.||
||[disabled](#manifest-disabled)||Boolean||Yes||No (\*)||Indicates if this image is available for provisioning.||
||[public](#manifest-public)||Boolean||Yes||Yes (\*)||Indicates if this image is publicly available.||
||[published_at](#manifest-published_at)||Date||Yes (if activated)||No||The date at which the image is activated). Set by the IMGAPI server.||
||[type](#manifest-type)||String||Yes||Yes||The image type. One of "zone-dataset" for a ZFS dataset used to create a new SmartOS zone, or "zvol" for a virtual machine image.||
||[os](#manifest-os)||String||Yes||Yes||The OS family this image provides. One of "smartos", "windows", "linux" or "other".||
||[files](#manifest-files)||Array||Yes (if activated)||No||An array with a single object describing the image file.||
||[acl](#manifest-acl)||Array||No||Yes||Access Control List. An array of account UUIDs given access to a private image. The field is only relevant to private images.||
||[requirements](#manifest-requirements)||Object||No||Yes||A set of named requirements for provisioning a VM with this image||
||[requirements.networks](#manifest-requirements-networks)||Array||No||Yes||Defines the minimum number of network interfaces required by this image.||
||[requirements.ssh_key](#manifest-requirements-ssh-key)||Boolean||No||Yes||Indicates that provisioning with this image requires that an SSH public key be provided.||
||[requirements.min_ram](#manifest-requirements-min-ram)||Integer||No||Yes||Minimum RAM (in MiB) required to provision this image.||
||[requirements.max_ram](#manifest-requirements-max-ram)||Integer||No||Yes||Maximum RAM (in MiB) this image may be provisioned with.||
||[users](#manifest-users)||Array||No||Yes||A list of users for which passwords should be generated for provisioning. This may only make sense for some images. Example: `[{"name": "root"}, {"name": "admin"}]`||
||[generate_passwords](#manifest-generate-passwords)||Boolean||No||Yes||A boolean indicating whether to generate passwords for the users in the "users" field. If not present, the default value is true.||
||[inherited_directories](#manifest-inherited-directories)||Array||No||Yes||A list of inherited directories (other than the defaults for the brand).||
||[nic_driver](#manifest-nic-driver)||String||Yes (if `type==="zvol"`)||Yes||NIC driver used by this VM image.||
||[disk_driver](#manifest-disk-driver)||String||Yes (if `type==="zvol"`)||Yes||Disk driver used by this VM image.||
||[cpu_type](#manifest-cpu-type)||String||Yes (if `type==="zvol"`)||Yes||The QEMU CPU model to use for this VM image.||
||[image_size](#manifest-image-size)||Number||Yes (if `type==="zvol"`)||Yes||The size (in MiB) of this VM image's disk.||

"Mutable?" refers to whether this field can be edited via
[UpdateImage](#UpdateImage). `disabled` can be modified via the
[DisableImage](#DisableImage) and [EnableImage](#EnableImage) endpoints.
`public` cannot be set false for an image on the "public mode" IMGAPI,
e.g. <https://images.joyent.com>.



## Manifest: uuid

An image `uuid` is the unique identifier for this UUID. This is what you
use to provision a VM. (For backwards compatibility unique identification
via a `urn` field is supported for legacy images. See the [urn section
below](#manifest-urn).)

An image UUID is created by the server on the [CreateImage](#CreateImage).
There are two exceptions: (1) The [MigrateImage](#MigrateImage) endpoint will
copy an image between two datacenters in the same cloud and persist the
UUID. (2) SDC operators can use the [AdminImportImage](#AdminImportImage)
to add an image with a specified UUID. In the latter case it is the
responsibility of the operator to ensure a given UUID is not duplicated,
or refers to different image data between separate clouds. A common case
for the latter is importing "core" Joyent-provided images from
<https://images.joyent.com>.


## Manifest: urn

**Deprecated.**  In SDC versions before SDC 7, an image (then called a
"dataset") could be uniquely identified by its `uuid` *and* by its `urn`.
While this is still true (images with a URN imported into IMGAPI retain
their URN), new images do not get a URN. The assumptions for the components
of URN (`<cloud_name>:<creator_name>:<name>:<version>`) are not maintainable
in global ecosystem of SmartOS images. Therefore the URN has been dropped as
a supported mechanism of uniquely identifying images. Use the `uuid` field.

## Manifest: owner

The account UUID of the owner/creator of this image.


## Manifest: name

A name for this image. Maximum 512 characters. However, typical names should
be much shorter, e.g. 5-20 characters.

Note that image `name` and `version` do not make a unique identifier for
an image. Separate users (and even the same user) can create images with
the same name and version. The image `uuid` is the only unique identifier
for an image.


## Manifest: version

A version string for this image. Maximum 128 characters. This is an opaque
string, i.e. no particular format or structure is enforced and
no ordering with other versions is implied. However, it is strongly suggested
that the [semver](http://semver.org/) versioning scheme be
followed. Further, the simple `Major.Minor.Patch` semver subset is ideal.

Note that image `name` and `version` do not make a unique identifier for
an image. Separate users (and even the same user) can create images with
the same name and version. The image `uuid` is the only unique identifier
for an image.


## Manifest: description

A short prose description of this image. Maximum 512 characters.


## Manifest: state

The current state of the image. One of the following values:

||**State**||**Description**||
||active||The image is ready for use, i.e. VMs can be provisioned using this image.||
||unactivated||The image has not yet been activated. See [ActivateImage](#ActivateImage).||
||disabled||The image is disabled. This will be the state if the image is activated, but also `disabled == true`. See [EnableImage](#EnableImage) and [DisableImage](#DisableImage).||

Note that [`disabled`](#manifest-disabled) and [`state`](#manifest-state) can
seem like duplicate information. However `state` is a computed value from
`disabled` and whether an image has yet been activated.


## Manifest: disabled

A boolean indicating if this image is disabled. A disabled image is only
visible to its owner in cloudapi. A disabled image cannot be used for
provisioning.

The [DisableImage](#DisableImage) and [EnableImage](#EnableImage) api
endpoints can be used to update the disabled state of an image.

Note that [`disabled`](#manifest-disabled) and [`state`](#manifest-state) can
seem like duplicate information. However `state` is a computed value from
`disabled` and whether an image has yet been activated.


## Manifest: public

A boolean indicating if this image is publicly available. Public images are
visible (and usable for provisioning) to anyone in cloudapi. Private images
(`public === false`) are only visible to the image owner and accounts listed
in [`acl`](#manifest-acl).


## Manifest: published_at

The date (in ISO-8601 format, e.g. "2012-05-02T15:14:45.805Z") at which this
image was published (i.e. activated via [ActivateImage](#ActivateImage)).

An image UUID is create by the server on the [ActivateImage](#ActivateImage).
There are two exceptions: (1) The [MigrateImage](#MigrateImage) endpoint will
copy an image between two datacenters in the same cloud and persist the
`published_at`. (2) SDC operators can use the
[AdminImportImage](#AdminImportImage) to add an image with a specified uuid
and `published_at`. A common case for the latter is importing "core"
Joyent-provided images from <https://images.joyent.com>.


## Manifest: type

The type of the image file. Must be one of:

||**OS**||**DESCRIPTION**||
||zone-dataset||a ZFS dataset used to create a new SmartOS zone||
||zvol||a KVM virtual machine image||


## Manifest: os

The operating system of the image file. Must be one of:

||**OS**||**DESCRIPTION**||
||smartos||SmartOS||
||linux||Linux, e.g. CentOS, Ubuntu, etc.||
||windows||A Microsoft Windows OS image||
||other||A catch-all for other operating systems.||


## Manifest: files

The array of image files that make up this image. Currently only a single
file is supported. An image cannot be activated until it has one file
uploaded. A "file" entry has the following fields:

||**OS**||**DESCRIPTION**||
||sha1||SHA-1 hex digest of the file content. Used for upload/download corruption checking.||
||size||number of bytes||
||compression||The type of file compression used by the file. One of 'bzip2', 'gzip', 'none'.||

Example:

    {
        ...
        "files": [{
            "sha1": "97f20b32c2016782257176fb58a35e5044f05840",
            "size": 46271847,
            "compression": "bzip2"
        }],
        ...
    }

**Backward compatibility notes:** In the DSAPI (Dataset API) from SDC 6.5
that preceded this there were two more fields:

- `files.*.path`: **Obsolete.** This field is no longer provided. It served
  no safe purpose. There was no guarantee that that "path" value was unique
  across images, hence it should not be used client-side.
- `files.*.url`: **Obsolete.** This field is no longer provided. The download
  URL for the image file is
  [`GET /images/:uuid/file` GetImageFile](#GetImageFile).


## Manifest: acl

An array of user/account UUIDs to which to give read access to a private
image. I.e. this is only relevant for images with `public === false`.


## Manifest: requirements

A grouping of various requirements for provisioning a VM with this image.


## Manifest: requirements.networks

Optional. An array describing the minimum number of network interfaces. This
example shows an image that requires one VNIC:

    {
        ...
        "requirements": {
            "networks": [{"name": "net0", "description": "public"}]
            ...
        },
        ...
    }

## Manifest: requirements.ssh_key

Optional. A boolean indicating that provisioning with this image requires
that an SSH public key be provided. For example, provisioning a Linux VM
requires an SSH key for initial SSH access. If not defined, it is presumed to
be false.

## Manifest: requirements.min_ram

Optional. `min_ram` is an integer number of MiB specifying the minimum RAM
required to provision this image. If `max_ram` is also specified, then
`min_ram <= max_ram` must be true.

## Manifest: requirements.max_ram

Optional. `max_ram` is an integer number of MiB specifying the maximum RAM
this image may provisioned with. If `min_ram` is also specified, then
`min_ram <= max_ram` must be true.

## Manifest: users

Optional. `users` is a list of users for which passwords should be generated
for provisioning. This may only make sense for some datasets. Example:

    "users": [{"name": "root"}, {"name": "admin"}]

## Manifest: generate_passwords

Optional. `generate_passwords` is a boolean indicating whether to generate
passwords for the users in the "users" field. If not present, the default
value is true.

## Manifest: inherited_directories

Optional. `inherited_directories` is a list of inherited directories (other
than the defaults for the brand). This can be left out or the empty list if
the dataset need not inherit directories. This field only makes sense for
datasets of type "zone-dataset". Example:

    {
        ...
        "inherited_directories": ["/opt/support"],
        ...
    }


## Manifest: nic_driver

The NIC driver used by this VM image. Examples are 'virtio', 'ne2k_pci',
'rtl8139', 'e1000', 'pcnet'.
This is a required field for `type === "zvol"` images.


## Manifest: disk_driver

The disk driver used by this VM image. Examples are 'virtio', 'ide', 'scsi'.
This is a required field for `type === "zvol"` images.


## Manifest: cpu_type

The QEMU CPU model to use for this VM. Examples are: "qemu64", "host".
This is a required field for `type === "zvol"` images.


## Manifest: image_size

The size (in MiB) of the VM's disk, and hence the required size of allocated
disk for provisioning.
This is a required field for `type === "zvol"` images.



# Use Cases

Here we look at some SDC use cases that touch on IMGAPI, and hence drive
its design.


## Use Case 1: Bootstrap SDC core zones' images on headnode setup

**Status**: complete.

[headnode.sh](https://mo.joyent.com/usb-headnode/blob/master/scripts/headnode.sh)
(see "/var/svc/log/system-smartdc-init:default.log") calls this:

    /opt/smartdc/bin/sdc-imgadm import -m $manifest -f $file

for all images used to provision SDC core zones.


## Use Case 2: Operator adds new images.joyent.com image to the DC

**Status**: incomplete (HEAD-1380 for CLI, talk to Kevin for adminui)

This can be done on the command-line via the following in the headnode GZ:

    cd /var/tmp
    joyent-imgadm list  # find the wanted image UUID
    joyent-imgadm get $uuid > manifest
    joyent-imgadm getfile $uuid > file
    sdc-imgadm import -m manifest -f file

The reason there isn't a command to have this DC's IMGAPI import
directory from <https://images.joyent.com> is that the IMGAPI doesn't
necessarily have access to the internet.

Via the Operator Portal (adminui): TODO


## Use Case 3: Operator adds a new image just for this cloud

**Status**: CLI incomplete (TODO: MigrateImage), adminui incomplete (talk to
kevin).

How to add an image to a DC via the command-line:

1. `scp` the image manifest and file to the headnode GZ.
2. ssh to the headnode GZ and run:

        sdc-imgadm import -m MANIFEST -f FILE

To add the same image to other DCs in the same cloud: Either repeat the
above steps for each DC or (TODO) use [MigrateImage](#MigrateImage).

How to add an image to a DC via the Operator Portal (adminui): TODO


## Use Case 4: User provisions with an image

**Status**: Incomplete. imgadm v2 is needed in the platform (IMGAPI-40).
Provisioner integration (AGENT-???). As well, VMAPI integration for
validation should also be turned on. Currently the latter is turned off to
not break manta-beta (MANTA-815).

This is via a normal
[cloudapi#CreateMachine](https://mo.joyent.com/docs/cloudapi/master/#CreateMachine)
call. CloudAPI could use [GetImage](#GetImage) on behalf of the calling user
to valid access to the `image_uuid`. VMAPI validates the `image_uuid`.
The provisioner agent uses the local `imgadm` to lazily install the image
if necessary (imgadm v2 will be configured to talk to the DC's local IMGAPI).


## Use Case 5: User creates a custom image

**Status**: Incomplete. Need to go through the DATASET-??? workflow for this
again.

TODO: fill this in


## Use Case 6: User modifies an image they own

**Status**: incomplete. UpdateImage (IMGAPI-58) required, then exposing that
via cloudapi (PUBAPI-???)

TODO: fill this in


## Use Case 7: User easily gets custom image from an Ubuntu ISO

**Status**: incomplete (need to discuss how that can work)

Mark:

    i would like it to be that i _start_ in JPC with imgadm as ISO images
    i.e., i say "here's the ubuntu ISO image" i want to boot off of.
    i then do whatever the fuck i want to my VM
    i take a snapshot. and right there, that's now a new image available to me and anyone i share with (later)

Q: how do I create an image from an ISO. Say a slackware, debian or whatever ISO?


## Use Case 8: Configure IMGAPI to use a newly setup Manta

**Status**: Incomplete. Need a setup plan for this. manta-deploy? SAPI?

Manta is an optional addition to SDC. IMGAPI is intended to work without
a Manta (using a local directory mount or NFS share, aka DCLS) -- with the
limitation that only operators can add images. To enable users adding
their own images, a Manta is required.

TODO: how is this setup? SAPI?



# Image file storage

There are three possible storage mechanisms for the (large) image files.
Which are in use depend on the IMGAPI configuration (and availability
in the DC).

1. manta: Requires an available Manta for this DC's region. All files are
   store in the "imgapi" user's Manta area.
2. dcls: Data Center Local Storage.
   TODO: details from wdp how this would be used.
3. local: A local dir (or locally mounted dir). Only useful for testing and
   development. This is insufficient for production usage because a locally
   mounted dir can't handle HA (imgapi zones on more than one server).

The set of available storages is set in the configuration. E.g.:

    "storage": {
        "manta": {
            "url": "https://manta.bh1-kvm1.joyent.us",   // or something
            "user": "imgapi",
            "password": "***"
        },
        "dcls": {
            "dir": "/mnt/share/imgapi"
        },
        "local": {
            "dir": "/var/db/imgapi"
        }
    }

A production setup needs at least one of "manta" or "dcls" storage, where
"production" is defined as running without the `IMGAPI_DEVELOPMENT` envvar
defined (with a non-empty string value). Likewise, usage of "local" is only
allowed if `IMGAPI_DEVELOPMENT` is set.

When adding an image file the storage used is determined as follows:

- if "manta" is available, use that
- else if "dcls" is available, use that
- else if "local" is available, use that


Open questions (TODO):

- Do we need more control than the above storage determination?
- Should 'dcls' usage be limited to a set of users? Or have a config item
  to limit the set of users that can use it. If so, then need an endpoint
  to update that config.



# Image API

An "image" object is the metadata for an image file, also called the manifest.
See [Image manifest data](#image-manifest-data) above for a summary of all
fields.


## ListImages (GET /images)

List images. Without query params this returns all active
(`state === "active"`) images.

There are two typical calling styles to this endpoint: with 'account=$UUID' and
without. The former is what cloudapi uses to ask on behalf of a particular
authenticated account. The latter is for operator-only querying.

### Inputs

||**Field**||**Type**||**Description**||
||account||UUID||Only list images visible to this account. A user can only see: (a) active public images, (b) active private images for which they are listing in the ACL, and (c) their own images.||
||owner||UUID||Only list images owned by this account.||
||state||String||List images with the given state. Can be one of 'active' (the default), 'disabled', 'unactivated' or 'all'.||
||name||String||List images with the given name. Prefix with `~` to do a substring match (case-*sensitive*). E.g., `~foo`.||
||version||String||List images with the given version.||
||public||Boolean||List just public or just private images.||
||os||String||List images with the given os.||
||type||String||List images of the given type.||

### Returns

An array of image objects.

### Errors

See [Errors](#errors) section above.

### Example

Raw curl (from images.joyent.com):

    $ curl -kisS https://images.joyent.com/images | json
    HTTP/1.1 200 OK
    Date: Tue, 08 Jan 2013 01:07:25 GMT
    Content-Type: application/json
    Connection: keep-alive
    Content-Length: 60203
    Server: IMGAPI/1.0.0
    x-request-id: c3993970-592f-11e2-8ef6-f7e53a279942
    x-response-time: 44
    x-server-name: b908c5b2-ccd9-4f43-b5ff-2997eb6bd682.local

    [
      {
        "uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
        "owner": "352971aa-31ba-496c-9ade-a379feaecd52",
        "name": "smartos",
        "version": "1.6.3",
        "state": "active",
        "disabled": false,
        "public": true,
        "published_at": "2012-05-02T15:14:45.805Z",
        "type": "zone-dataset",
        "os": "smartos",
        "files": [
          {
            "sha1": "97f20b32c2016782257176fb58a35e5044f05840",
            "size": 46271847,
            "compression": "bzip2"
          }
        ],
        "description": "Base template to build other templates on",
    ...

CLI tool (from images.joyent.com):

    $ joyent-imgadm list
    UUID                                  NAME           VERSION  OS       STATE   PUBLISHED
    febaa412-6417-11e0-bc56-535d219f2590  smartos        1.3.12   smartos  active  2011-04-11
    7456f2b0-67ac-11e0-b5ec-832e6cf079d5  nodejs         1.1.3    smartos  active  2011-04-15
    ...

    $ joyent-imgadm list name=~base   # filter on substring in name
    UUID                                  NAME    VERSION  OS       STATE   PUBLISHED
    8418dccc-c9c6-11e1-91f4-5fb387d839c5  base    1.7.0    smartos  active  2012-07-09
    d0eebb8e-c9cb-11e1-8762-2f01c4acd80d  base64  1.7.0    smartos  active  2012-07-10
    ...

In an SDC headnode GZ to talk to that data center's IMGAPI:

    $ sdc-imgapi /images
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 515
    Date: Tue, 08 Jan 2013 01:08:19 GMT
    Server: IMGAPI/1.0.0
    x-request-id: e3b681e0-592f-11e2-b638-4b6ffa4ca56f
    x-response-time: 1
    x-server-name: 70f0978d-7efa-4c45-8ebf-8cb9e3a887f7
    Connection: keep-alive

    [
      {
        "uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
        "owner": "352971aa-31ba-496c-9ade-a379feaecd52",
        "name": "smartos",
        "version": "1.6.3",
    ...

CLI tool (from an SDC's IMGAPI):

    $ sdc-imgadm list state=all
    UUID                                  NAME     VERSION  OS       STATE        PUBLISHED
    e70502b0-705e-498e-a810-53a03980eabf  foo      1.0.0    smartos  unactivated  -
    01b2c898-945f-11e1-a523-af1afbe22822  smartos  1.6.3    smartos  active       2012-05-02
    ...


## GetImage (GET /images/:uuid)

Get a image by uuid.

There are two typical calling styles to this endpoint: with 'account=$UUID' and
without. The former is what cloudapi uses to ask on behalf of a particular
authenticated account. The latter is for operator-only querying.

### Inputs

||**Field**||**Type**||**Description**||
||account||UUID||Only return an image visible to this account. A user can only see: (a) active public images, (b) active private images for which they are on the ACL, and (c) their own images.||

### Returns

An image object.

### Errors

See [Errors](#errors) section above.

### Example

Raw curl (from images.joyent.com):

    $ curl -sS https://images.joyent.com/images/01b2c898-945f-11e1-a523-af1afbe22822
    {
      "uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
    ...

CLI tool (from images.joyent.com):

    $ joyent-imgadm get 01b2c898-945f-11e1-a523-af1afbe22822
    {
      "uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
    ...

Raw API tool (from an SDC's IMGAPI):

    $ sdc-imgapi /images/01b2c898-945f-11e1-a523-af1afbe22822
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 513
    Date: Tue, 08 Jan 2013 01:10:06 GMT
    Server: IMGAPI/1.0.0
    x-request-id: 2383aaf0-5930-11e2-b638-4b6ffa4ca56f
    x-response-time: 71
    x-server-name: 70f0978d-7efa-4c45-8ebf-8cb9e3a887f7
    Connection: keep-alive

    {
      "uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
      "owner": "352971aa-31ba-496c-9ade-a379feaecd52",
      "name": "smartos",
      "version": "1.6.3",
      "state": "active",
      "disabled": false,
      "public": true,
      "published_at": "2012-05-02T15:14:45.805Z",
      "type": "zone-dataset",
      "os": "smartos",
      "files": [
        {
          "sha1": "97f20b32c2016782257176fb58a35e5044f05840",
          "size": 46271847,
          "compression": "bzip2"
        }
      ],
      "description": "Base template to build other templates on",
      "urn": "sdc:sdc:smartos:1.6.3",
      "requirements": {
        "networks": [
          {
            "name": "net0",
            "description": "public"
          }
        ]
      }
    }

CLI tool (from an SDC's IMGAPI):

    $ sdc-imgadm get 01b2c898-945f-11e1-a523-af1afbe22822
    {
      "uuid": "01b2c898-945f-11e1-a523-af1afbe22822",
    ...



## GetImageFile (GET /images/:uuid/file)

Get the image file.

### Inputs

None.

### Returns

The (typically large) image file content.

### Errors

See [Errors](#errors) section above.

### Example

Raw curl (from images.joyent.com):

    $ curl -kIsS https://images.joyent.com/images/01b2c898-945f-11e1-a523-af1afbe22822/file -o file.bz2

CLI tool (from images.joyent.com):

    $ joyent-imgadm getfile 01b2c898-945f-11e1-a523-af1afbe22822 -O
    100% [=============================]  time 43.4s  eta 0.0s
    Saved "01b2c898-945f-11e1-a523-af1afbe22822.bz2".

Raw API tool (from an SDC's IMGAPI):

    $ sdc-imgapi /images/01b2c898-945f-11e1-a523-af1afbe22822/file -o file.bz2

CLI tool (from an SDC's IMGAPI):

    $ sdc-imgadm getfile 01b2c898-945f-11e1-a523-af1afbe22822 -O
    100% [=============================]  time 43.4s  eta 0.0s
    Saved "01b2c898-945f-11e1-a523-af1afbe22822.bz2".



## DeleteImage (DELETE /images/:uuid)

Delete this image (and its file, if any).

### Inputs

None.

### Returns

Responds with HTTP 204 (No Content).

### Errors

See [Errors](#errors) section above.

### Example

CLI tool (from images.joyent.com):

    $ joyent-imgadm delete 69d8bd69-db68-a54c-bec5-8c934822cfa9
    Deleted image 69d8bd69-db68-a54c-bec5-8c934822cfa9

Raw API tool (from an SDC's IMGAPI):

    $ sdc-imgapi /images/f9bbbc9f-d281-be42-9651-72c6be875874/file -X DELETE

CLI tool (from an SDC's IMGAPI):

    $ sdc-imgadm delete 7a1b1967-6ecf-1e4c-8f09-f49094cc36ad
    Deleted image 7a1b1967-6ecf-1e4c-8f09-f49094cc36ad



## CreateImage (POST /images)

Create a new (unactivated) image from a manifest. The typical process is to
subsequently call [AddImageFile](#AddImageFile) and then
[ActivateImage](#ActivateImage) to finish with an image available for
provisioning.

### Inputs

||**Field**||**Type**||**Required?**||**Default**||**Notes**||
||account||UUID||Yes\*||-||The account UUID on behalf of whom this request is being made. If given and if relevant, authorization will be done for this account. At least one of `account` or `owner` is required. It is expected that all calls originating from a user (e.g. from cloudapi) will provide this parameter.||
||[owner](#manifest-owner)||UUID||Yes\*||-||The UUID of the owner of this image (the account that created it). If not given, the given `account` is used. At least one of `account` or `owner` is required.||
||[name](#manifest-name)||String||Yes||-||A short name (and optionally version) for this image. Max 512 characters. No uniqueness guantee.||
||[version](#manifest-version)||String||Yes||-||A version string for this image. Max 128 characters. No uniqueness guarantee.||
||[description](#manifest-description)||String||No||-||A short description of the image.||
||[disabled](#manifest-disabled)||Boolean||No||false||Indicates if this image should be available for provisioning.||
||[public](#manifest-public)||Boolean||No||false||Indicates if this image is publicly available.||
||[type](#manifest-type)||String||Yes||-||The image type. One of "zone-dataset" for a ZFS dataset used to create a new SmartOS zone, or "zvol" for a virtual machine image.||
||[os](#manifest-os)||String||Yes||-||The OS family this image provides. One of "smartos", "windows", and "linux".||
||[acl](#manifest-acl)||Array||No||-||Access Control List. An array of account UUIDs given access to a private image. The field is only relevant to private images.||
||[requirements](#manifest-requirements)||Object||No||-||A set of named requirements for provisioning a VM with this image. See [the requirements docs](#manifest-requirements) above for supported fields.||
||[users](#manifest-users)||Array||No||-||A list of users for which passwords should be generated for provisioning. This may only make sense for some images. Example: `[{"name": "root"}, {"name": "admin"}]`||
||[generate_passwords](#manifest-generate-passwords)||Boolean||No||-||A boolean indicating whether to generate passwords for the users in the "users" field. If not present, the default value is true.||
||[inherited_directories](#manifest-inherited-directories)||Array||No||-||A list of inherited directories (other than the defaults for the brand).||
||[nic_driver](#manifest-nic-driver)||String||Yes (if `type==="zvol"`)||-||NIC driver used by this VM image.||
||[disk_driver](#manifest-disk-driver)||String||Yes (if `type==="zvol"`)||-||Disk driver used by this VM image.||
||[cpu_type](#manifest-cpu-type)||String||Yes (if `type==="zvol"`)||-||The QEMU CPU model to use for this VM image.||
||[image_size](#manifest-image-size)||Number||Yes (if `type==="zvol"`)||-||The size (in MiB) of this VM image's disk.||


### Returns

The (unactivated) image object.

### Errors

See [Errors](#errors) section above.

### Example

Raw API tool (against an SDC's IMGAPI). This creates a new unactivated
image:

    $ sdc-imgapi /images -X POST \
        --data-binary '{
            "name": "foo",
            "version": "1.0.0",
            "type": "zone-dataset",
            "os": "smartos",
            "owner": "b5c5c13d-ccc0-5a43-9a46-245ff960cd81"
        }'
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 236
    Date: Tue, 08 Jan 2013 20:04:01 GMT
    Server: IMGAPI/1.0.0
    x-request-id: 8b547800-59ce-11e2-b638-4b6ffa4ca56f
    x-response-time: 52
    x-server-name: 70f0978d-7efa-4c45-8ebf-8cb9e3a887f7
    Connection: keep-alive

    {
      "uuid": "e70502b0-705e-498e-a810-53a03980eabf",
      "owner": "b5c5c13d-ccc0-5a43-9a46-245ff960cd81",
      "name": "foo",
      "version": "1.0.0",
      "state": "unactivated",
      "disabled": false,
      "public": false,
      "type": "zone-dataset",
      "os": "smartos",
      "files": [],
      "acl": []
    }

CLI tool (against an SDC's IMGAPI):

    $ echo '{
        "name": "foo",
        "version": "1.0.0",
        "type": "zone-dataset",
        "os": "smartos",
        "owner": "b5c5c13d-ccc0-5a43-9a46-245ff960cd81"
    }' | sdc-imgadm create
    Imported image 25ab9ddf-96e8-4157-899d-1dc8be7b9810 (foo, 1.0.0, state=unactivated)



## AddImageFile (PUT /images/:uuid/file)

Add the image file. If the image already has a file, it will be overwritten.
A file can only be added to an image that has not yet been activated. The
typical process is to call this after [CreateImage](#CreateImage), and then
subsequently call [ActivateImage](#ActivateImage) to make the image available
for provisioning, `state == "active"`.

### Inputs

||**Field**||**Type**||**Required?**||**Default**||**Notes**||
||account||UUID||No||-||The account UUID on behalf of whom this request is being made. If given and if relevant, authorization will be done for this account. It is expected that all calls originating from a user (e.g. from cloudapi) will provide this parameter.||
||[compression](#manifest-files)||UUID||Yes||-||The type of compression used for the file content. One of 'none', 'gzip' or 'bzip2'.||
||(file content in the body)||binary||Yes||-||The image file content.||

### Returns

The updated image object.

### Errors

See [Errors](#errors) section above.

### Example

Raw API tool (against an SDC's IMGAPI). This example is using curl's
`-T/--upload-file <file>` option, which results in a PUT.

    $ sdc-imgapi /images/e70502b0-705e-498e-a810-53a03980eabf/file?compression=bzip2 \
        -T image.bz2
    HTTP/1.1 100 Continue

    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 319
    Date: Tue, 08 Jan 2013 20:17:46 GMT
    Server: IMGAPI/1.0.0
    x-request-id: 773c5b10-59d0-11e2-b638-4b6ffa4ca56f
    x-response-time: 106
    x-server-name: 70f0978d-7efa-4c45-8ebf-8cb9e3a887f7
    Connection: keep-alive

    {
      "uuid": "e70502b0-705e-498e-a810-53a03980eabf",
      "owner": "b5c5c13d-ccc0-5a43-9a46-245ff960cd81",
      "name": "foo",
      "version": "1.0.0",
      "state": "unactivated",
      "disabled": false,
      "public": false,
      "type": "zone-dataset",
      "os": "smartos",
      "files": [
        {
          "sha1": "cd0e0510c4a0799551687901077d7c4c06a4ebd8",
          "size": 46271847,
          "compression": "bzip2"
        }
      ],
      "acl": []
    }

CLI tool:

    $ sdc-imgadm addfile 25ab9ddf-96e8-4157-899d-1dc8be7b9810 -f file.bz2
    100% [=============================]  time 5.6s  eta 0.0s
    Added file "file.bz2" to image 25ab9ddf-96e8-4157-899d-1dc8be7b9810


## ActivateImage (POST /images/:uuid?action=activate)

Activate the image. This makes the image available for provisioning -- the
`state` field will be "active". The image must already have had a file
uploaded via [AddImageFile](#AddImageFile). Once activated, an image cannot
be "deactivated". However it can be [*disabled*](#DisableImage) temporarily
or [*deleted*](#DeleteImage) permanently.

### Inputs

None.

### Returns

The updated image object.

### Errors

See [Errors](#errors) section above.

### Example

Raw API tool:

    $ sdc-imgapi /images/e70502b0-705e-498e-a810-53a03980eabf?action=activate -X POST
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 356
    Date: Tue, 08 Jan 2013 20:21:17 GMT
    Server: IMGAPI/1.0.0
    x-request-id: f5645880-59d0-11e2-b638-4b6ffa4ca56f
    x-response-time: 110
    x-server-name: 70f0978d-7efa-4c45-8ebf-8cb9e3a887f7
    Connection: keep-alive

    {
      "uuid": "e70502b0-705e-498e-a810-53a03980eabf",
      "owner": "00000000-0000-0000-0000-000000000000",
      "name": "foo",
      "version": "1.0.0",
      "state": "active",
      "disabled": false,
      "public": false,
      "published_at": "2013-01-08T20:21:17.932Z",
      "type": "zone-dataset",
      "os": "smartos",
      "files": [
        {
          "sha1": "cd0e0510c4a0799551687901077d7c4c06a4ebd8",
          "size": 42,
          "compression": "bzip2"
        }
      ],
      "acl": []
    }

CLI tool:

    $ sdc-imgadm activate 25ab9ddf-96e8-4157-899d-1dc8be7b9810
    Activated image 25ab9ddf-96e8-4157-899d-1dc8be7b9810



## UpdateImage (POST /images/:uuid?action=update)

Update some fields in the image manifest. Not all fields can be updated. The
inputs section lists every image attribute that can be modified. Note that this
action is a complete replace of the attributes specified in the request and not
a partial update. Any input is optional but at least one attribute must be
updated.

**NOTE** Public images residing on a public mode server cannot be made private.

### Inputs

||**Field**||**Type**||**Default**||**Notes**||
||account||UUID||-||The account UUID on behalf of whom this request is being made. If given and if relevant, authorization will be done for this account. At least one of `account` or `owner` is required. It is expected that all calls originating from a user (e.g. from cloudapi) will provide this parameter.||
||[owner](#manifest-owner)||UUID||-||The UUID of the new owner of this image.||
||[name](#manifest-name)||String||-||A short name (and optionally version) for this image. Max 512 characters. No uniqueness guantee.||
||[version](#manifest-version)||String||-||A version string for this image. Max 128 characters. No uniqueness guarantee.||
||[description](#manifest-description)||String||-||A short description of the image.||
||[public](#manifest-public)||Boolean||false||Indicates if this image is publicly available.||
||[type](#manifest-type)||String||-||The image type. One of "zone-dataset" for a ZFS dataset used to create a new SmartOS zone, or "zvol" for a virtual machine image.||
||[os](#manifest-os)||String||-||The OS family this image provides. One of "smartos", "windows", and "linux".||
||[acl](#manifest-acl)||Array||-||Access Control List. An array of account UUIDs given access to a private image. The field is only relevant to private images.||
||[requirements](#manifest-requirements)||Object||-||A set of named requirements for provisioning a VM with this image. See [the requirements docs](#manifest-requirements) above for supported fields.||
||[users](#manifest-users)||Array||-||A list of users for which passwords should be generated for provisioning. This may only make sense for some images. Example: `[{"name": "root"}, {"name": "admin"}]`||
||[generate_passwords](#manifest-generate-passwords)||Boolean||-||A boolean indicating whether to generate passwords for the users in the "users" field.||
||[nic_driver](#manifest-nic-driver)||String||-||NIC driver used by this VM image. Required if `type==="zvol"`||
||[disk_driver](#manifest-disk-driver)||String||-||Disk driver used by this VM image. Required if `type==="zvol"`||
||[cpu_type](#manifest-cpu-type)||String||-||The QEMU CPU model to use for this VM image. Required if `type==="zvol"`||
||[image_size](#manifest-image-size)||Number||-||The size (in MiB) of this VM image's disk. Required if `type==="zvol"`||

### Returns

The updated image object.

### Errors

See [Errors](#errors) section above.

### Example

    $ sdc-imgapi /images/f9bbbc9f-d281-be42-9651-72c6be875874?action=update -X POST
        --data-binary '{
            "description": "updated description"
        }'



## AdminImportImage (POST /images/:uuid?action=import)

Import an image (preserving its `uuid` and `published_at` fields). This is
typically used for importing an image from <https://images.joyent.com>,
Joyent's central repository of vetted SmartOS images.

This may only be used by operators. This is enforced by requiring that
`account=UUID` is NOT provided. All usage of IMGAPI on behalf of end users
is required to use `account=UUID`; operator usage (e.g. from AdminUI) is
not.

This creates an unactivated image. The typical process is to subsequently
call [AddImageFile](#AddImageFile) and then [ActivateImage](#ActivateImage)
to finish with an image available for provisioning.

### Inputs

The same fields as for [CreateImage](#CreateImage), including the SDC6-era
backward compat fields, with the following additions and changes:

||**Field**||**Type**||**Required?**||**Default**||**Notes**||
||account||UUID||No\*||-||This must NOT be provided. See the discussion above.||
||uuid||UUID||Yes||-||The existing image UUID.||
||published_at||Date||No||-||The published date/time of the image.||

### Returns

The (unactivated) image object.

### Errors

See [Errors](#errors) section above.

### Example

Raw API tool:

    $ sdc-imgapi /images/01b2c898-945f-11e1-a523-af1afbe22822?action=import \
        -X POST --data-binary @smartos-1.6.3.dsmanifest
    ...

CLI tool. This example uses the '-f FILE' argument, which will handle
AddImageFile and ActivateImage calls after the AdminImportImage.

    $ sdc-imgadm import -m manifest -f file.bz2
    Imported image 84cb7edc-3f22-11e2-8a2a-3f2a7b148699 (base, 1.8.4, state=unactivated)
    100% [=============================]  time 0.6s  eta 0.0s
    Added file "file.bz2" to image 84cb7edc-3f22-11e2-8a2a-3f2a7b148699
    Activated image 84cb7edc-3f22-11e2-8a2a-3f2a7b148699



# Miscellaneous API

## Ping (GET /ping)

A simple ping to check to health of the IMGAPI server. Here "pid" is the PID
of the IMGAPI server process. This is helpful for the test suite.

### Inputs

||**Field**||**Type**||**Description**||
||error||String||Optional. An error code name, e.g. "ResourceNotFound" to simulate an error response.||
||message||String||Optional. The error message to include in the simulated error response. Defaults to "pong".||

### Returns

When not simulating an error response, a "pong" object is returned:

||**Field**||**Type**||**Description**||
||ping||String||"pong"||
||pid||String||The PID of IMGAPI server process.||
||version||String||The version of the IMGAPI app..||

When simulating an error, the HTTP response code depends on the error type
and the response body is an JSON object with:

||**Field**||**Type**||**Description**||
||code||String||A restify error code, e.g. "ResourceNotFound", "InternalError". ||
||message||String||Error message.||

### Examples

    $ sdc-imgapi /ping
    HTTP/1.1 200 OK
    Content-Type: application/json
    Content-Length: 45
    Date: Tue, 08 Jan 2013 19:52:42 GMT
    Server: IMGAPI/1.0.0
    x-request-id: f6f24850-59cc-11e2-b638-4b6ffa4ca56f
    x-response-time: 0
    x-server-name: 70f0978d-7efa-4c45-8ebf-8cb9e3a887f7
    Connection: keep-alive

    {
      "ping": "pong",
      "pid": 23097,
      "version": "1.0.0"
    }

Ping can also be used to simulate error responses from the IMGAPI:

    $ sdc-imgapi /ping?error=ValidationFailed
    HTTP/1.1 422 Unprocessable Entity
    Content-Type: application/json
    Content-Length: 56
    Date: Tue, 08 Jan 2013 19:53:31 GMT
    Server: IMGAPI/1.0.0
    x-request-id: 143dfa30-59cd-11e2-b638-4b6ffa4ca56f
    x-response-time: 0
    x-server-name: 70f0978d-7efa-4c45-8ebf-8cb9e3a887f7
    Connection: keep-alive

    {
      "code": "ValidationFailed",
      "message": "boom",
      "errors": []
    }


## AdminGetState (GET /state)

Return server internal state. For debugging/dev only.

### Inputs

None.

### Returns

A JSON representation of some internal state.

### Example

    $ sdc-imgapi /state
    {
      "cache": {
        ...
      },
      "log": {
        "level": 20
      },
      ...
    }



# Configuration

Reference docs on configuration vars to imgapi. Default values are in
"etc/defaults.json". Custom values are provided in a JSON file passed in with
the "-f CFG-FILE" command-line option. By default this is
"./etc/imgapi.config.json". Note that given custom values override full
top-level keys in the factory settings. For example: if providing
'ufds', one must provide the whole 'ufds' object.

||**var**||**type**||**default**||**description**||
||port||Number||8080||Port number on which to listen.||
||serverName||String||IMGAPI/$version||Name of the HTTP server. This value is present on every HTTP response in the 'server' header.||
||logLevel||String or Number||debug||Level at which to log. One of the supported Bunyan log levels. This is overridden by the `-d|--debug` switch.||
||mode||String||public||One of 'public' (default), running as a public server (e.g. images.joyent.com), or 'dc', running as the IMGAPI in an SDC datacenter.||
||auth||Object||-||If in 'public' mode, then auth details are required. 'dc' mode does no auth.||
||auth.type||String||-||One of 'basic' (HTTP Basic Auth) or 'signature' ([HTTP Signature auth](https://github.com/joyent/node-http-signature)).||
||auth.users||Object||-||Required if `auth.type === 'basic'`. A mapping of username to bcrypt-hashed password. Use the `bin/hash-basic-auth-password` tool to create the hash.||
||auth.keys||Object||-||Required if `auth.type === 'signature'`. A mapping of username to an array of ssh public keys.||
||database||Object||-||Database info. The "database" is how the image manifest data is stored.||
||database.type||String||ufds||One of 'ufds' (the default, i.e. use an SDC UFDS directory service) or 'local'. The 'local' type is a quick implementation appropriate only for smallish numbers of images.||
||database.url||String||-||LDAP URL to connect to UFDS. Required if `database.type === 'ufds'`.||
||database.rootDn||String||-||UFDS root dn. Required if `database.type === 'ufds'`.||
||database.password||String||-||UFDS root dn password. Required if `database.type === 'ufds'`.||
||database.dir||String||-||The base directory for the database `database.type === 'local'`.||
||storage||Object||-||The set of available storage mechanisms for the image *files*. There must be at least one. See the [Image file storage](#image-file-storage) section for discussion.||
||storage.manta||Object||-||TODO: doc||
||storage.dcls||Object||-||TODO: doc||
||storage.local||Object||-||TODO: doc||



# Operator Guide

This section is intended to give necessary information for diagnosing and
dealing with issues with Image API in a SmartDataCenter installation.

There is one IMGAPI per datacenter. There might actually be more than
one "imgapi" zone for HA. Use this to list the imgapi zones in a DC:

    sdc-vmapi /vms?owner_uuid=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid) \
        | json -H -c "tags.smartdc_role=='imgapi'"


## Health

An IMGAPI server has a "/ping" endpoint to indicate if it is up

    $ sdc-imgapi /ping

or if there are multiple IMGAPI servers:

    $ for ip in $(bash /lib/sdc/config.sh -json | json imgapi_admin_ips | tr ',' ' '); do \
        echo "# $ip" ; \
        curl -sS http://$ip/ping | json ; \
    done

TODO: sdc-healthcheck, sdc-webinfo


## Logs

||**service/path**||**where**||**format**||**tail -f**||
||imgapi||in each "imgapi" zone||[Bunyan](https://github.com/trentm/node-bunyan)||`` sdc-login imgapi; tail -f `svcs -L imgapi` | bunyan ``||
