---
title: Image API (IMGAPI)
markdown2extras: wiki-tables, code-friendly, cuddled-lists
apisections: Miscellaneous
---

# Image API (IMGAPI)

TODO



# Use Cases

Here we look at some SDC use cases that touch on IMGAPI, and hence drive
its design.


## Use Case: Headnode setup installs core zones' images

"headnode.sh" (see "/var/svc/log/system-smartdc-init:default.log") calls
this:

    imgadm install -m ${ds_manifest} -f ${ds_filename}

This will never directly touch IMGAPI, because IMGAPI itself is created
by this headnode setup. However this bootstraping is relevant for context.
In this case, the image file and manifest are locally provided on the USB
key.

TODO: As part of the 'imgapi' zone setup, these core images should be
added. They use local disk storage (actually assets mounted from
"/usbkey/datasets").


## Use Case: Operator adds new public image via operator portal

Operator uses operator portal (adminui) to import a new image from
https://images.joyent.com.

TODO: fill this in


## Use Case: Operator adds a new image just for this cloud

Operator uses operator portal (adminui) to add a new image to this DC.


## Use Case: User provisions with a public image

TODO: fill this in


## Use Case: User adds an custom image and provisions with it

TODO: fill this in

## Use Case: User easily gets custom image from an Ubuntu ISO

Mark:

    i would like it to be that i _start_ in JPC with imgadm as ISO images
    i.e., i say "here's the ubuntu ISO image" i want to boot off of.
    i then do whatever the fuck i want to my VM
    i take a snapshot. and right there, that's now a new image available to me and anyone i share with (later)

Q: how do I create an image from an ISO. Say a slackware, debian or whatever ISO?



## Image file storage

There are three possible storage mechanisms for the (large) image files.
Which are in use depend on the IMGAPI configuration (and availability
in the DC).

1. manta: Requires an available Manta for this DC's region. All files are
   store in the "imgapi" user's Manta area.
2. dcls: Data Center Local Storage. TODO: details from wdp how this would
   be used.
3. local: A locally mounted storage dir. Currently this is '/usbkey/datasets'
   mounted into the 'imgapi' zone(s).

This is the preferred order. Only operators can add use 'local' storage.

Open questions (TODO):

- Revisit with product whether allowing a blessed set of users to add custom
  images should require dcls. Or, IOW, should there be a fourth option
  between "usbkey" and "dcls": just a mount of a lot of space to the 'imgapi'
  zone?
- Should 'dcls' usage be limited to a set of users? Or have a config item
  to limit the set of users that can use it. If so, then need an endpoint
  to update that config.
- 'local' storage being a mount from the GZ limits HA for imgapi: can't put
  an imgapi zone on a CN. How to avoid this limit?




# Miscellaneous

## Ping (GET /ping)

A simple ping to check to health of the IMGAPI server. Here "pid" is the PID
of the IMGAPI server process. This is helpful for the test suite.

### Inputs

||**Field**||**Type**||**Description**||
||error||String||Optional. An error code name, e.g. "ResourceNotFound" to simulate an error response.||
||message||String||Optional. The error message to include in the simulated error response. Defaults to "pong".||

### Returns

When not simulating an error response, a "pong" object is returned:

||**Field**||**Type**||**Description**||
||ping||String||"pong"||
||pid||String||The PID of IMGAPI server process.||
||version||String||The version of the IMGAPI app..||

When simulating an error, the HTTP response code depends on the error type
and the response body is an JSON object with:

||**Field**||**Type**||**Description**||
||code||String||A restify error code, e.g. "ResourceNotFound", "InternalError". ||
||message||String||Error message.||

### Examples

    $ sdc-imgapi /ping
    HTTP/1.1 200 OK
    Connection: close
    Date: Wed, 02 Nov 2011 04:40:42 GMT
    Server: IMGAPI/1.0.0
    X-Api-Version: 1.0.0
    X-Request-Id: 265a6379-bbf5-4d86-bd11-5e96614035d8
    X-Response-Time: 2
    Content-Length: 15
    Content-MD5: tBwJDpsyo/hcYx2xrziwrw==
    Content-Type: application/json
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: OPTIONS, GET
    Access-Control-Allow-Headers: Accept, Content-Type, Content-Length, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time

    {
      "ping": "pong"
      "pid": 1234,
      "version": "1.0.0"
    }

Ping can also be used to simulate error responses from the IMGAPI:

    $ sdc-imgapi /ping?error=ResourceNotFound\&message=nada
    HTTP/1.1 404 Not Found
    Connection: close
    Date: Tue, 06 Dec 2011 23:43:03 GMT
    Server: IMGAPI/1.0.0
    X-Api-Version: 1.0.0
    X-Request-Id: 849950cf-e9de-452b-9640-6f4c7da053e2
    X-Response-Time: 2
    Content-Length: 44
    Content-MD5: /vxoedHxPf+L11uaQ8bkJQ==
    Content-Type: application/json
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: OPTIONS, GET
    Access-Control-Allow-Headers: Accept, Content-Type, Content-Length, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time

    {
      "code": "ResourceNotFound",
      "message": "nada"
    }


# Configuration

Reference docs on configuration vars to imgapi. Default values are in
"etc/defaults.json". Custom values are provided in a JSON file passed in with
the "-f CFG-FILE" command-line option. By default this is
"./etc/imgapi.config.json". Note that given custom values override full
top-level keys in the factory settings. For example: if providing
'userCache', one must provide the whole userCache object.

||**var**||**type**||**default**||**description**||
||port||Number||8080||Port number on which to listen.||
||logLevel||String or Number||debug||Level at which to log. One of the supported Bunyan log levels. This is overridden by the `-d|--debug` switch.||
||ufds.url||String||-||LDAP URL to connect to UFDS.||
||ufds.rootDn||String||-||UFDS root dn.||
||ufds.password||String||-||UFDS root dn password.||
||ufds.caching||Boolean||true||Should UFDS caching should be enabled?||
||userCache.size||Number||1000||The number of entries to cache.||
||userCache.expiry||Number||300000 (5min)||The number of milliseconds for which cache entries are valid.||



# Operator Guide

This section is intended to give necessary information for diagnosing and
dealing with issues with Image API in a SmartDataCenter installation.

There is one IMGAPI per datacenter. There might actually be more than
one "imgapi" zone for HA. Use this to list the imgapi zones in a DC:

    sdc-vmapi /vms?owner_uuid=$(bash /lib/sdc/config.sh -json | json ufds_admin_uuid) \
        | json -H -c "tags.smartdc_role=='imgapi'"


## Health

An IMGAPI server has a "/ping" endpoint to indicate if it is up

    $ sdc-imgapi /ping

or if there are multiple IMGAPI servers:

    $ for ip in $(bash /lib/sdc/config.sh -json | json imgapi_admin_ips | tr ',' ' '); do \
        echo "# $ip" ; \
        curl -sS http://$ip/ping | json ; \
    done

TODO: sdc-healthcheck, sdc-webinfo


## Logs

||**service/path**||**where**||**format**||**tail -f**||
||imgapi||in each "imgapi" zone||[Bunyan](https://github.com/trentm/node-bunyan)||`` sdc-login imgapi; tail -f `svcs -L imgapi` | bunyan ``||
